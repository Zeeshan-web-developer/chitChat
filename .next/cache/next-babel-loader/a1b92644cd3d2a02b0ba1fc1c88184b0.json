{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"D:\\\\chat\\\\helpers\\\\chatContext\\\\chatCtx.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport { fetchChatMemberApi, fetchChatApi } from '../../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ChatProvider = function ChatProvider(props) {\n  _s();\n\n  var _useState = useState([]),\n      chatMembers = _useState[0],\n      setChatMembers = _useState[1];\n\n  var _useState2 = useState([]),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var currentUserId = 0;\n\n  var _useState3 = useState({\n    \"id\": 0,\n    \"name\": \"Jony Lynetin\",\n    \"thumb\": \"contact/2.jpg\",\n    \"status\": \"8\",\n    \"mesg\": \"Typing................\",\n    \"lastSeenDate\": \"30/11/19\",\n    \"onlineStatus\": \"online\",\n    \"typing\": true\n  }),\n      selectedUser = _useState3[0],\n      setSelectedUser = _useState3[1];\n\n  var _useState4 = useState(false),\n      isTyeping = _useState4[0],\n      setIsTypeing = _useState4[1];\n\n  useEffect(function () {\n    // get all initial chat users\n    fetchChatMemberApi().then(function (res) {\n      setChatMembers(res.data);\n\n      if (res) {\n        fetchChatApi().then(function (chatres) {\n          var selectedUserId = chatres.data[0].users.find(function (x) {\n            return x !== currentUserId;\n          });\n          var IsselectedUser = res.data.find(function (x) {\n            return x.id === selectedUserId;\n          });\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    }); // get initial chat between two chat users\n\n    fetchChatApi().then(function (res) {\n      setChats(res.data);\n\n      if (res) {\n        fetchChatMemberApi().then(function (memberres) {\n          var selectedUserId = res.data[0].users.find(function (x) {\n            return x !== currentUserId;\n          });\n          var IsselectedUser = memberres.data.find(function (x) {\n            return x.id === selectedUserId;\n          });\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []); // chat with user first time\n\n  var createChat = function createChat(currentUserId, selectedUserId, chats, onlineStatus) {\n    var conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus\n    };\n    chats.splice(0, 0, conversation);\n    var selectedUser = chatMembers.find(function (x) {\n      return x.id === selectedUserId;\n    });\n    setChats(_toConsumableArray(chats));\n    setSelectedUser(selectedUser);\n  }; // change existing chat between two chat users\n\n\n  var changeChat = function changeChat(userId) {\n    var selectedUser = chatMembers.find(function (x) {\n      return x.id === userId;\n    });\n    setSelectedUser(selectedUser);\n  }; // send message to selected chat users\n\n\n  var sendMessage = function sendMessage(currentUserId, selectedUserId, messageInput, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser);\n    }\n  }; // reply message to selected chat users\n\n\n  var replyMessage = function replyMessage(currentUserId, selectedUserId, _replyMessage, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: _replyMessage,\n        read: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = '';\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser2 = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      _selectedUser2.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser2);\n    }\n  }; // send stickers or images\n\n\n  var sendImages = function sendImages(currentUserId, selectedUserId, image, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = '';\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser3 = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser3);\n    }\n  }; // when chat user replied to our message existing tyeping loader\n\n\n  var typingMessage = function typingMessage(typeing) {\n    setIsTypeing(typeing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      chatMembers: chatMembers,\n      chats: chats,\n      currentUser: chatMembers[0],\n      selectedUser: selectedUser,\n      isTyeping: isTyeping,\n      changeChat: changeChat,\n      createChat: createChat,\n      sendMessage: sendMessage,\n      replyMessage: replyMessage,\n      sendImages: sendImages,\n      typingMessage: typingMessage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChatProvider, \"4rYLZPookys7jZg/T3JgTc6Vuag=\");\n\n_c = ChatProvider;\nexport default ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["D:/chat/helpers/chatContext/chatCtx.js"],"names":["React","useState","useEffect","Context","fetchChatMemberApi","fetchChatApi","ChatProvider","props","chatMembers","setChatMembers","chats","setChats","currentUserId","selectedUser","setSelectedUser","isTyeping","setIsTypeing","then","res","data","chatres","selectedUserId","users","find","x","IsselectedUser","id","memberres","createChat","onlineStatus","conversation","length","lastMessageTime","messages","stickers","splice","changeChat","userId","sendMessage","messageInput","chat","includes","now","Date","time","getHours","getMinutes","push","sender","text","status","chats_data","filter","replyMessage","read","online","sendImages","image","typingMessage","typeing","currentUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport {fetchChatMemberApi,fetchChatApi} from '../../api/index'\n\nconst ChatProvider = (props) => {\n\n    const [chatMembers,setChatMembers] = useState([])\n    const [chats,setChats] = useState([])\n    const currentUserId = 0;\n    const [selectedUser,setSelectedUser] = useState({\n        \"id\": 0,\n        \"name\": \"Jony Lynetin\",\n        \"thumb\": \"contact/2.jpg\",\n        \"status\": \"8\",\n        \"mesg\":\"Typing................\",\n        \"lastSeenDate\": \"30/11/19\",\n        \"onlineStatus\": \"online\",\n        \"typing\": true\n    })\n    const [isTyeping,setIsTypeing] = useState(false)\n\n    useEffect(() => {\n        // get all initial chat users\n        fetchChatMemberApi().then(res => {\n            setChatMembers(res.data)\n            if(res) {\n                fetchChatApi().then(chatres => {\n                    const selectedUserId = chatres.data[0].users.find(x => x !== currentUserId);\n                    const IsselectedUser = res.data.find(x => x.id === selectedUserId)\n                    setSelectedUser(IsselectedUser)\n                })\n            }\n            }\n        )\n        // get initial chat between two chat users\n        fetchChatApi().then(res => {\n            setChats(res.data)\n            if(res){\n                fetchChatMemberApi().then(memberres => {\n                    const selectedUserId = res.data[0].users.find(x => x !== currentUserId);\n                    const IsselectedUser = memberres.data.find(x => x.id === selectedUserId)\n                    setSelectedUser(IsselectedUser)\n                }) \n            }\n        })\n        \n    },[])\n\n    // chat with user first time\n    const createChat = (currentUserId, selectedUserId, chats,onlineStatus) => {\n        let conversation = {\n            id: chats.length + 1,\n            users: [currentUserId, selectedUserId],\n            lastMessageTime: \"-\",\n            messages: [],\n            stickers:[],\n            onlineStatus:onlineStatus\n        };\n        chats.splice(0, 0, conversation)\n        const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n        setChats([...chats])\n        setSelectedUser(selectedUser)\n    }\n\n    // change existing chat between two chat users\n    const changeChat = (userId) => {\n        const selectedUser = chatMembers.find(x => x.id === userId)\n        setSelectedUser(selectedUser)\n    }\n\n    // send message to selected chat users\n    const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.messages.push({\n                sender: currentUserId,\n                time: time,\n                text: messageInput,\n                status:true\n            });\n            chat.lastMessageTime = time;\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser)\n        }\n        \n    }\n\n    // reply message to selected chat users\n    const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.messages.push({\n                sender: selectedUserId,\n                time: time,\n                text: replyMessage,\n                read:true\n            });\n            chat.lastMessageTime = time;\n            chat.online = '';\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            selectedUser.onlineStatus = \"online\" // chat user reply the message then set selected chat user  status to \"online\"\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser)\n        }\n    }\n\n    // send stickers or images\n    const sendImages = (currentUserId, selectedUserId, image, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.stickers.push({\n                sender: currentUserId,\n                time: time,\n                stickers: image,\n                status:true\n            });\n            chat.lastMessageTime = time;\n            chat.online = '';\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser) \n        }\n    }\n\n    // when chat user replied to our message existing tyeping loader\n    const typingMessage = (typeing) => {\n        setIsTypeing(typeing)\n    }\n\n    return(\n    <Context.Provider value={{\n        chatMembers:chatMembers,\n        chats : chats,\n        currentUser:chatMembers[0],\n        selectedUser:selectedUser,\n        isTyeping:isTyeping,\n        changeChat:changeChat,\n        createChat:createChat,\n        sendMessage:sendMessage,\n        replyMessage:replyMessage,\n        sendImages:sendImages,\n        typingMessage:typingMessage\n    }}>\n        {props.children}\n    </Context.Provider>\n    )\n}\n\nexport default ChatProvider;"]},"metadata":{},"sourceType":"module"}