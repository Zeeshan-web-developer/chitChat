{"ast":null,"code":"var _this = this;\n\nimport * as XMPP from \"stanza\";\nvar chatClient = {\n  create: create = function create(username, password) {\n    var client = XMPP.createClient({\n      jid: username,\n      password: password,\n      transports: {\n        websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n        bosh: \"false\"\n      }\n    });\n    client.on(\"session:started\", function () {\n      client.getRoster();\n      client.sendPresence();\n    });\n    client.on(\"auth:failed\", _this.onAuthFailed);\n    client.on(\"auth:success\", _this.onAuthSuccess); // client.on(\"*\", console.log);\n\n    client.on(\"message\", _this.onMessage);\n    client.on(\"message\", function (msg) {\n      return console.log(\"Message is as: \" + JSON.stringify(msg));\n    });\n    _this.client = client;\n    return client;\n  },\n  connect: connect = function connect() {\n    _this.client.connect();\n  }\n}; // disconnect() {\n//   this.client.disconnect();\n// }\n// const send(message) {\n//   this.client.sendMessage(message);\n// }","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","chatClient","create","username","password","client","createClient","jid","transports","websocket","bosh","on","getRoster","sendPresence","onAuthFailed","onAuthSuccess","onMessage","msg","console","log","JSON","stringify","connect"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAGA,MAAM,GAAG,gBAACC,QAAD,EAAWC,QAAX,EAAwB;AACxC,QAAMC,MAAM,GAAGL,IAAI,CAACM,YAAL,CAAkB;AAC/BC,MAAAA,GAAG,EAAEJ,QAD0B;AAE/BC,MAAAA,QAAQ,EAARA,QAF+B;AAG/BI,MAAAA,UAAU,EAAE;AACVC,QAAAA,SAAS,EAAE,2CADD;AAEVC,QAAAA,IAAI,EAAE;AAFI;AAHmB,KAAlB,CAAf;AAQAL,IAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCN,MAAAA,MAAM,CAACO,SAAP;AACAP,MAAAA,MAAM,CAACQ,YAAP;AACD,KAHD;AAIAR,IAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,KAAI,CAACG,YAA9B;AACAT,IAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,KAAI,CAACI,aAA/B,EAdwC,CAexC;;AACAV,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,KAAI,CAACK,SAA1B;AACAX,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,UAACM,GAAD;AAAA,aACnBC,OAAO,CAACC,GAAR,CAAY,oBAAoBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAhC,CADmB;AAAA,KAArB;AAGA,IAAA,KAAI,CAACZ,MAAL,GAAcA,MAAd;AACA,WAAOA,MAAP;AACD,GAvBgB;AAyBjBiB,EAAAA,OAAO,EAAGA,OAAO,GAAG,mBAAM;AACxB,IAAA,KAAI,CAACjB,MAAL,CAAYiB,OAAZ;AACD;AA3BgB,CAAnB,C,CA8BA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import * as XMPP from \"stanza\";\r\nconst chatClient = {\r\n  create: (create = (username, password) => {\r\n    const client = XMPP.createClient({\r\n      jid: username,\r\n      password,\r\n      transports: {\r\n        websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n        bosh: \"false\",\r\n      },\r\n    });\r\n    client.on(\"session:started\", () => {\r\n      client.getRoster();\r\n      client.sendPresence();\r\n    });\r\n    client.on(\"auth:failed\", this.onAuthFailed);\r\n    client.on(\"auth:success\", this.onAuthSuccess);\r\n    // client.on(\"*\", console.log);\r\n    client.on(\"message\", this.onMessage);\r\n    client.on(\"message\", (msg) =>\r\n      console.log(\"Message is as: \" + JSON.stringify(msg))\r\n    );\r\n    this.client = client;\r\n    return client;\r\n  }),\r\n\r\n  connect: (connect = () => {\r\n    this.client.connect();\r\n  }),\r\n};\r\n\r\n// disconnect() {\r\n//   this.client.disconnect();\r\n// }\r\n\r\n// const send(message) {\r\n//   this.client.sendMessage(message);\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}