{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar XMPP = _interopRequireWildcard(require(\"stanza\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar client;\n\nfunction _default(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    }\n  });\n  client.on(\"session:started\", function () {\n    client.getRoster();\n    client.sendPresence();\n  });\n  client.on(\"auth:failed\", console.log(\"Failed\"));\n  client.on(\"auth:success\", console.log(\"auth success\")); // client.on(\"*\", console.log);\n\n  client.on(\"message\", function (msg) {\n    return console.log(\"Message is as: \" + JSON.stringify(msg));\n  });\n  this.client = client;\n  return client;\n}\n\nvar connect = function connect() {\n  client.connect();\n};\n\nmodule.exports = {\n  connect: connect\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["client","username","password","XMPP","createClient","jid","transports","websocket","bosh","on","getRoster","sendPresence","console","log","msg","JSON","stringify","connect","module","exports"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAIA,MAAJ;;AACe,kBAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAC3CF,EAAAA,MAAM,GAAGG,IAAI,CAACC,YAAL,CAAkB;AACzBC,IAAAA,GAAG,EAAEJ,QADoB;AAEzBC,IAAAA,QAAQ,EAARA,QAFyB;AAGzBI,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI;AAHa,GAAlB,CAAT;AAQAR,EAAAA,MAAM,CAACS,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCT,IAAAA,MAAM,CAACU,SAAP;AACAV,IAAAA,MAAM,CAACW,YAAP;AACD,GAHD;AAIAX,EAAAA,MAAM,CAACS,EAAP,CAAU,aAAV,EAAyBG,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAzB;AACAb,EAAAA,MAAM,CAACS,EAAP,CAAU,cAAV,EAA0BG,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA1B,EAd2C,CAe3C;;AACAb,EAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqB,UAACK,GAAD;AAAA,WACnBF,OAAO,CAACC,GAAR,CAAY,oBAAoBE,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAhC,CADmB;AAAA,GAArB;AAGA,OAAKd,MAAL,GAAcA,MAAd;AACA,SAAOA,MAAP;AACD;;AAED,IAAMiB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBjB,EAAAA,MAAM,CAACiB,OAAP;AACD,CAFD;;AAGAC,MAAM,CAACC,OAAP,GAAiB;AAAEF,EAAAA,OAAO,EAAPA;AAAF,CAAjB","sourcesContent":["import * as XMPP from \"stanza\";\r\nlet client;\r\nexport default function (username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n  });\r\n  client.on(\"session:started\", () => {\r\n    client.getRoster();\r\n    client.sendPresence();\r\n  });\r\n  client.on(\"auth:failed\", console.log(\"Failed\"));\r\n  client.on(\"auth:success\", console.log(\"auth success\"));\r\n  // client.on(\"*\", console.log);\r\n  client.on(\"message\", (msg) =>\r\n    console.log(\"Message is as: \" + JSON.stringify(msg))\r\n  );\r\n  this.client = client;\r\n  return client;\r\n}\r\n\r\nconst connect = () => {\r\n  client.connect();\r\n};\r\nmodule.exports = { connect };\r\n"]},"metadata":{},"sourceType":"script"}