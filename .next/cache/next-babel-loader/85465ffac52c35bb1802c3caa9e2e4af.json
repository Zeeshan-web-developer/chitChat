{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat\\\\helpers\\\\chatContext\\\\chatCtx.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Context from \"./index\";\nimport { fetchChatMemberApi, fetchChatApi } from \"../../api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatProvider = props => {\n  const {\n    0: chatMembers,\n    1: setChatMembers\n  } = useState([]);\n  const {\n    0: chats,\n    1: setChats\n  } = useState([]);\n  const currentUserId = 0;\n  const {\n    0: selectedUser,\n    1: setSelectedUser\n  } = useState({\n    id: 0,\n    name: \"Jony Lynetin\",\n    thumb: \"contact/2.jpg\",\n    status: \"8\",\n    mesg: \"Typing................\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    typing: true\n  });\n  const {\n    0: isTyeping,\n    1: setIsTypeing\n  } = useState(false);\n  useEffect(() => {\n    // get all initial chat users\n    fetchChatMemberApi().then(res => {\n      setChatMembers(res.data);\n\n      if (res) {\n        fetchChatApi().then(chatres => {\n          const selectedUserId = chatres.data[0].users.find(x => x !== currentUserId);\n          const IsselectedUser = res.data.find(x => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    }); // get initial chat between two chat users\n\n    fetchChatApi().then(res => {\n      setChats(res.data);\n\n      if (res) {\n        fetchChatMemberApi().then(memberres => {\n          const selectedUserId = res.data[0].users.find(x => x !== currentUserId);\n          const IsselectedUser = memberres.data.find(x => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []); // chat with user first time\n\n  const createChat = (currentUserId, selectedUserId, chats, onlineStatus) => {\n    let conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus\n    };\n    console.log(\"createchat\", chats);\n    chats.splice(0, 0, conversation); //we are adding conversion at 0th index\n\n    const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n    setChats([...chats]);\n    setSelectedUser(selectedUser);\n  }; // change existing chat between two chat users\n\n\n  const changeChat = userId => {\n    console.log(\"change chat\", userId);\n    const selectedUser = chatMembers.find(x => x.id === userId);\n    setSelectedUser(selectedUser);\n  }; // send message to selected chat users\n\n\n  const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // reply message to selected chat users\n\n\n  const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: replyMessage,\n        read: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      selectedUser.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // send stickers or images\n\n\n  const sendImages = (currentUserId, selectedUserId, image, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // when chat user replied to our message existing tyeping loader\n\n\n  const typingMessage = typeing => {\n    setIsTypeing(typeing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      chatMembers: chatMembers,\n      chats: chats,\n      currentUser: chatMembers[0],\n      selectedUser: selectedUser,\n      isTyeping: isTyeping,\n      changeChat: changeChat,\n      createChat: createChat,\n      sendMessage: sendMessage,\n      replyMessage: replyMessage,\n      sendImages: sendImages,\n      typingMessage: typingMessage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ChatProvider;","map":{"version":3,"sources":["D:/chat/helpers/chatContext/chatCtx.js"],"names":["React","useState","useEffect","Context","fetchChatMemberApi","fetchChatApi","ChatProvider","props","chatMembers","setChatMembers","chats","setChats","currentUserId","selectedUser","setSelectedUser","id","name","thumb","status","mesg","lastSeenDate","onlineStatus","typing","isTyeping","setIsTypeing","then","res","data","chatres","selectedUserId","users","find","x","IsselectedUser","memberres","createChat","conversation","length","lastMessageTime","messages","stickers","console","log","splice","changeChat","userId","sendMessage","messageInput","chat","includes","now","Date","time","getHours","getMinutes","push","sender","text","chats_data","filter","replyMessage","read","online","sendImages","image","typingMessage","typeing","currentUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Context from \"./index\";\nimport { fetchChatMemberApi, fetchChatApi } from \"../../api/index\";\n\nconst ChatProvider = (props) => {\n  const [chatMembers, setChatMembers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const currentUserId = 0;\n  const [selectedUser, setSelectedUser] = useState({\n    id: 0,\n    name: \"Jony Lynetin\",\n    thumb: \"contact/2.jpg\",\n    status: \"8\",\n    mesg: \"Typing................\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    typing: true,\n  });\n  const [isTyeping, setIsTypeing] = useState(false);\n\n  useEffect(() => {\n    // get all initial chat users\n\n    fetchChatMemberApi().then((res) => {\n      setChatMembers(res.data);\n      if (res) {\n        fetchChatApi().then((chatres) => {\n          const selectedUserId = chatres.data[0].users.find(\n            (x) => x !== currentUserId\n          );\n          const IsselectedUser = res.data.find((x) => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n    // get initial chat between two chat users\n    fetchChatApi().then((res) => {\n      setChats(res.data);\n      if (res) {\n        fetchChatMemberApi().then((memberres) => {\n          const selectedUserId = res.data[0].users.find(\n            (x) => x !== currentUserId\n          );\n          const IsselectedUser = memberres.data.find(\n            (x) => x.id === selectedUserId\n          );\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []);\n\n  // chat with user first time\n  const createChat = (currentUserId, selectedUserId, chats, onlineStatus) => {\n    let conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus,\n    };\n    console.log(\"createchat\", chats);\n\n    chats.splice(0, 0, conversation); //we are adding conversion at 0th index\n    const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n    setChats([...chats]);\n    setSelectedUser(selectedUser);\n  };\n\n  // change existing chat between two chat users\n  const changeChat = (userId) => {\n    console.log(\"change chat\", userId);\n    const selectedUser = chatMembers.find((x) => x.id === userId);\n    setSelectedUser(selectedUser);\n  };\n\n  // send message to selected chat users\n  const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true,\n      });\n      chat.lastMessageTime = time;\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // reply message to selected chat users\n  const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: replyMessage,\n        read: true,\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      selectedUser.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // send stickers or images\n  const sendImages = (currentUserId, selectedUserId, image, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true,\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // when chat user replied to our message existing tyeping loader\n  const typingMessage = (typeing) => {\n    setIsTypeing(typeing);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        chatMembers: chatMembers,\n        chats: chats,\n        currentUser: chatMembers[0],\n        selectedUser: selectedUser,\n        isTyeping: isTyeping,\n        changeChat: changeChat,\n        createChat: createChat,\n        sendMessage: sendMessage,\n        replyMessage: replyMessage,\n        sendImages: sendImages,\n        typingMessage: typingMessage,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default ChatProvider;\n"]},"metadata":{},"sourceType":"module"}