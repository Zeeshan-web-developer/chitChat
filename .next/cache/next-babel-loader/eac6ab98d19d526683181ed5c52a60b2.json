{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as XMPP from \"stanza\";\nvar client;\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); // client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n    setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              client.ping(username).then(function (message) {\n                console.log(\"ping send\");\n              })[\"catch\"](function (error) {\n                console.log(\"error\", error);\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })), 1000);\n  });\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n  });\n  client.on(\"subscribe\", function (ReceivedPresence) {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n  });\n  return client;\n}\nvar roster;\n\nvar getContacts = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context2.sent;\n            roster = contacts.items;\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getContacts() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport var getRosterItems = function getRosterItems() {\n  return roster;\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","client","chatClient","username","password","createClient","jid","transports","websocket","bosh","rosterVer","on","console","log","getContacts","sendPresence","setInterval","ping","then","message","error","ReceivedPresence","acceptSubscription","from","roster","getRoster","contacts","items","getRosterItems"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,IAAIC,MAAJ;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACrDH,EAAAA,MAAM,GAAGD,IAAI,CAACK,YAAL,CAAkB;AACzBC,IAAAA,GAAG,EAAEH,QADoB;AAEzBC,IAAAA,QAAQ,EAARA,QAFyB;AAGzBG,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAHa;AAOzBC,IAAAA,SAAS,EAAE;AAPc,GAAlB,CAAT,CADqD,CAUrD;;AACAT,EAAAA,MAAM,CAACU,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAC,IAAAA,WAAW;AACXb,IAAAA,MAAM,CAACc,YAAP;AACAC,IAAAA,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AACVf,cAAAA,MAAM,CACHgB,IADH,CACQd,QADR,EAEGe,IAFH,CAEQ,UAACC,OAAD,EAAa;AACjBP,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,eAJH,WAKS,UAACO,KAAD,EAAW;AAChBR,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,KAArB;AACD,eAPH;;AADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,IASR,IATQ,CAAX;AAUD,GAdD;AAgBAnB,EAAAA,MAAM,CAACU,EAAP,CAAU,aAAV,EAAyB,YAAM;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAFD;AAIAZ,EAAAA,MAAM,CAACU,EAAP,CAAU,WAAV,EAAuB,UAACU,gBAAD,EAAsB;AAC3CT,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCQ,gBAArC;AACApB,IAAAA,MAAM,CAACqB,kBAAP,CAA0BD,gBAAgB,CAACE,IAA3C;AACD,GAHD;AAIA,SAAOtB,MAAP;AACD;AAED,IAAIuB,MAAJ;;AACA,IAAMV,WAAW;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGb,MAAM,CAACwB,SAAP,EADH;;AAAA;AACdC,YAAAA,QADc;AAGlBF,YAAAA,MAAM,GAAGE,QAAQ,CAACC,KAAlB;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXb,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAMA,OAAO,IAAMc,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAOJ,MAAP;AACD,CAFM","sourcesContent":["import * as XMPP from \"stanza\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  // client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n    setInterval(async () => {\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"ping send\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"error\", error);\r\n        });\r\n    }, 1000);\r\n  });\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n  });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}