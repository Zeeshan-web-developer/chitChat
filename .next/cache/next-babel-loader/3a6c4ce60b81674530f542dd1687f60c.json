{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as XMPP from \"stanza\";\nvar client;\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\n    getContacts();\n    client.sendPresence();\n  });\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n  });\n  return client;\n}\nexport var getContacts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context.sent;\n            console.log(\"all contacts \", contacts.items);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","client","chatClient","username","password","createClient","jid","transports","websocket","bosh","rosterVer","on","subscribe","getContacts","sendPresence","console","log","getRoster","contacts","items"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,IAAIC,MAAJ;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACrDH,EAAAA,MAAM,GAAGD,IAAI,CAACK,YAAL,CAAkB;AACzBC,IAAAA,GAAG,EAAEH,QADoB;AAEzBC,IAAAA,QAAQ,EAARA,QAFyB;AAGzBG,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAHa;AAOzBC,IAAAA,SAAS,EAAE;AAPc,GAAlB,CAAT,CADqD,CAUrD;;AACAT,EAAAA,MAAM,CAACU,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCV,IAAAA,MAAM,CAACW,SAAP,CAAiB,iCAAjB;AACAC,IAAAA,WAAW;AACXZ,IAAAA,MAAM,CAACa,YAAP;AACD,GAJD;AAMAb,EAAAA,MAAM,CAACU,EAAP,CAAU,aAAV,EAAyB,YAAM;AAC7BI,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAFD;AAGA,SAAOf,MAAP;AACD;AAED,OAAO,IAAMY,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFZ,MAAM,CAACgB,SAAP,EADE;;AAAA;AACnBC,YAAAA,QADmB;AAEzBH,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,QAAQ,CAACC,KAAtC;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXN,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import * as XMPP from \"stanza\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n  return client;\r\n}\r\n\r\nexport const getContacts = async () => {\r\n  const contacts = await client.getRoster();\r\n  console.log(\"all contacts \", contacts.items);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}