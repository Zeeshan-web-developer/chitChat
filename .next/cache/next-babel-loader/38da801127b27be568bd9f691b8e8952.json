{"ast":null,"code":"import * as XMPP from \"stanza\";\nexport default class ChatClient {\n  constructor(onAuthFailed, onAuthSuccess, onMessage) {\n    this.onAuthFailed = onAuthFailed;\n    this.onAuthSuccess = onAuthSuccess;\n    this.onMessage = onMessage;\n  }\n\n  create(username, password) {\n    const client = XMPP.createClient({\n      jid: username,\n      password,\n      transports: {\n        websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n        bosh: \"false\"\n      }\n    });\n    client.on(\"session:started\", () => {\n      client.getRoster();\n      client.sendPresence();\n    });\n    client.on(\"auth:failed\", this.onAuthFailed);\n    client.on(\"auth:success\", this.onAuthSuccess); // client.on(\"*\", console.log);\n\n    client.on(\"message\", this.onMessage);\n    client.on(\"message\", msg => console.log(\"Message is as: \" + JSON.stringify(msg)));\n    this.client = client;\n    return client;\n  }\n\n  connect() {\n    this.client.connect();\n  }\n\n  disconnect() {\n    this.client.disconnect();\n  }\n\n  send(message) {\n    this.client.sendMessage(message);\n  }\n\n}","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","ChatClient","constructor","onAuthFailed","onAuthSuccess","onMessage","create","username","password","client","createClient","jid","transports","websocket","bosh","on","getRoster","sendPresence","msg","console","log","JSON","stringify","connect","disconnect","send","message","sendMessage"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,YAAD,EAAeC,aAAf,EAA8BC,SAA9B,EAAyC;AAClD,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,MAAM,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACzB,UAAMC,MAAM,GAAGT,IAAI,CAACU,YAAL,CAAkB;AAC/BC,MAAAA,GAAG,EAAEJ,QAD0B;AAE/BC,MAAAA,QAF+B;AAG/BI,MAAAA,UAAU,EAAE;AACVC,QAAAA,SAAS,EAAE,2CADD;AAEVC,QAAAA,IAAI,EAAE;AAFI;AAHmB,KAAlB,CAAf;AAQAL,IAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA6B,MAAM;AACjCN,MAAAA,MAAM,CAACO,SAAP;AACAP,MAAAA,MAAM,CAACQ,YAAP;AACD,KAHD;AAIAR,IAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,KAAKZ,YAA9B;AACAM,IAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,KAAKX,aAA/B,EAdyB,CAezB;;AACAK,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,KAAKV,SAA1B;AACAI,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsBG,GAAD,IACnBC,OAAO,CAACC,GAAR,CAAY,oBAAoBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAhC,CADF;AAGA,SAAKT,MAAL,GAAcA,MAAd;AACA,WAAOA,MAAP;AACD;;AAEDc,EAAAA,OAAO,GAAG;AACR,SAAKd,MAAL,CAAYc,OAAZ;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAKf,MAAL,CAAYe,UAAZ;AACD;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACZ,SAAKjB,MAAL,CAAYkB,WAAZ,CAAwBD,OAAxB;AACD;;AAzC6B","sourcesContent":["import * as XMPP from \"stanza\";\r\n\r\nexport default class ChatClient {\r\n  constructor(onAuthFailed, onAuthSuccess, onMessage) {\r\n    this.onAuthFailed = onAuthFailed;\r\n    this.onAuthSuccess = onAuthSuccess;\r\n    this.onMessage = onMessage;\r\n  }\r\n\r\n  create(username, password) {\r\n    const client = XMPP.createClient({\r\n      jid: username,\r\n      password,\r\n      transports: {\r\n        websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n        bosh: \"false\",\r\n      },\r\n    });\r\n    client.on(\"session:started\", () => {\r\n      client.getRoster();\r\n      client.sendPresence();\r\n    });\r\n    client.on(\"auth:failed\", this.onAuthFailed);\r\n    client.on(\"auth:success\", this.onAuthSuccess);\r\n    // client.on(\"*\", console.log);\r\n    client.on(\"message\", this.onMessage);\r\n    client.on(\"message\", (msg) =>\r\n      console.log(\"Message is as: \" + JSON.stringify(msg))\r\n    );\r\n    this.client = client;\r\n    return client;\r\n  }\r\n\r\n  connect() {\r\n    this.client.connect();\r\n  }\r\n\r\n  disconnect() {\r\n    this.client.disconnect();\r\n  }\r\n\r\n  send(message) {\r\n    this.client.sendMessage(message);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}