{"ast":null,"code":"import * as XMPP from \"stanza\";\nimport dateTime from \"../containers/leftSidebar/datetime\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus, setLoginError, setNewMessage, setLastMessage, removeRecentUser, addNewUSer } from \"../redux/actions/index\";\nlet client;\nexport default function chatClient(username, password) {\n  console.log(\"connection request\");\n  client = XMPP.createClient({\n    jid: username,\n    password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\",\n    timeout: 60\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", () => {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n  }); //pinging the server\n\n  setInterval(() => {\n    var ifConnected = window.navigator.onLine;\n    let reconnect;\n    const user = localStorage.getItem(\"username\");\n    const pass = localStorage.getItem(\"password\");\n\n    if (ifConnected) {\n      client.ping(username).then(message => {\n        console.log(\"Messaage ping\");\n      }).catch(error => {\n        console.log(\"ping error\", error);\n        reconnect = chatClient(user, pass);\n        console.log(\"connect\", user, pass); //reconnect.disconnect();\n\n        reconnect.connect();\n        setTimeout(() => {\n          console.log(\"after error connect to the server after 60 secnods\");\n          reconnect.connect();\n        }, 60000);\n      });\n    } else {\n      console.log(\"Connection not available\");\n      client.disconnect();\n    }\n  }, 5000);\n  client.on(\"auth:failed\", () => {\n    console.log(\"xmpp authentication failed\");\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\n  });\n  client.on(\"subscribe\", ReceivedPresence => {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, () => console.log(\"subscrption request sent back to\" + ReceivedPresence.from));\n  });\n  client.on(\"presence\", presence => {\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\n      //here we need to update user status that user is offline\n      console.log(\"i am unavailable\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"offline\"\n      }));\n    } else if (!presence.hasOwnProperty(\"type\")) {\n      //here we need to update user status that user is online\n      console.log(\"i am available\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"online\"\n      }));\n    }\n  });\n  client.on(\"unavailable\", presence => {// console.log(presence.from + \" is offline\");\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n  //here we listen incoming messages\n\n  client.on(\"message\", newMessage => {\n    let found = false;\n    let foundID;\n    const recentUsers = store.getState().user.chatedUsers;\n    newMessage[\"messageTime\"] = dateTime();\n    newMessage[\"direction\"] = \"received\";\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\n    newMessage[\"fromto\"] = newMessage.from;\n\n    for (var i = 0; i < recentUsers.length; i++) {\n      if (recentUsers[i].id === newMessage.from) {\n        found = true;\n        foundID = recentUsers[i].id;\n        break;\n      }\n    }\n\n    if (!found) {\n      recentUsers.map(ci => {\n        if (!ci.hasOwnProperty(\"mesg\")) {\n          store.dispatch(removeRecentUser(ci.id));\n        }\n      });\n      store.dispatch(addNewUSer({\n        id: newMessage.from,\n        first_name: \"Jon\",\n        status: \"online\",\n        onlineStatus: \"online\",\n        status: \"online\"\n      }));\n    }\n\n    console.log(\"user found on message received: \" + found);\n    store.dispatch(setNewMessage(newMessage));\n    store.dispatch(setLastMessage({\n      id: newMessage.from,\n      message: newMessage.body,\n      time: dateTime()\n    }));\n  });\n  return client;\n}\nlet roster;\n\nconst getContacts = async () => {\n  let contacts = await client.getRoster();\n  roster = contacts.items;\n};\n\nexport const getRosterItems = () => {\n  return roster;\n};\nexport const sendNewMessage = newMessage => {\n  client && client.sendMessage(newMessage);\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","dateTime","store","updateUserStatus","setLoginError","setNewMessage","setLastMessage","removeRecentUser","addNewUSer","client","chatClient","username","password","console","log","createClient","jid","transports","websocket","bosh","rosterVer","timeout","on","getContacts","sendPresence","setInterval","ifConnected","window","navigator","onLine","reconnect","user","localStorage","getItem","pass","ping","then","message","catch","error","connect","setTimeout","disconnect","dispatch","ReceivedPresence","acceptSubscription","from","subscribe","presence","hasOwnProperty","type","id","split","onlineStatus","newMessage","found","foundID","recentUsers","getState","chatedUsers","i","length","map","ci","first_name","status","body","time","roster","contacts","getRoster","items","getRosterItems","sendNewMessage","sendMessage"],"mappings":"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","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport dateTime from \"../containers/leftSidebar/datetime\";\r\nimport store from \"../redux/store/store\";\r\nimport {\r\n  updateUserStatus,\r\n  setLoginError,\r\n  setNewMessage,\r\n  setLastMessage,\r\n  removeRecentUser,\r\n  addNewUSer,\r\n} from \"../redux/actions/index\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  console.log(\"connection request\");\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n    timeout: 60,\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  //pinging the server\r\n  setInterval(() => {\r\n    var ifConnected = window.navigator.onLine;\r\n    let reconnect;\r\n    const user = localStorage.getItem(\"username\");\r\n    const pass = localStorage.getItem(\"password\");\r\n    if (ifConnected) {\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"Messaage ping\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"ping error\", error);\r\n          reconnect = chatClient(user, pass);\r\n          console.log(\"connect\", user, pass);\r\n          //reconnect.disconnect();\r\n          reconnect.connect();\r\n          setTimeout(() => {\r\n            console.log(\"after error connect to the server after 60 secnods\");\r\n            reconnect.connect();\r\n          }, 60000);\r\n        });\r\n    } else {\r\n      console.log(\"Connection not available\");\r\n      client.disconnect();\r\n    }\r\n  }, 5000);\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n\r\n  client.on(\"presence\", (presence) => {\r\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\r\n      //here we need to update user status that user is offline\r\n      console.log(\"i am unavailable\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"offline\",\r\n        })\r\n      );\r\n    } else if (!presence.hasOwnProperty(\"type\")) {\r\n      //here we need to update user status that user is online\r\n      console.log(\"i am available\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"online\",\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  client.on(\"unavailable\", (presence) => {\r\n    // console.log(presence.from + \" is offline\");\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n\r\n  //here we listen incoming messages\r\n  client.on(\"message\", (newMessage) => {\r\n    let found = false;\r\n    let foundID;\r\n    const recentUsers = store.getState().user.chatedUsers;\r\n\r\n    newMessage[\"messageTime\"] = dateTime();\r\n    newMessage[\"direction\"] = \"received\";\r\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\r\n    newMessage[\"fromto\"] = newMessage.from;\r\n\r\n    for (var i = 0; i < recentUsers.length; i++) {\r\n      if (recentUsers[i].id === newMessage.from) {\r\n        found = true;\r\n        foundID = recentUsers[i].id;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      recentUsers.map((ci) => {\r\n        if (!ci.hasOwnProperty(\"mesg\")) {\r\n          store.dispatch(removeRecentUser(ci.id));\r\n        }\r\n      });\r\n      store.dispatch(\r\n        addNewUSer({\r\n          id: newMessage.from,\r\n          first_name: \"Jon\",\r\n          status: \"online\",\r\n          onlineStatus: \"online\",\r\n          status: \"online\",\r\n        })\r\n      );\r\n    }\r\n    console.log(\"user found on message received: \" + found);\r\n    store.dispatch(setNewMessage(newMessage));\r\n    store.dispatch(\r\n      setLastMessage({\r\n        id: newMessage.from,\r\n        message: newMessage.body,\r\n        time: dateTime(),\r\n      })\r\n    );\r\n  });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n\r\nexport const sendNewMessage = (newMessage) => {\r\n  client && client.sendMessage(newMessage);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}