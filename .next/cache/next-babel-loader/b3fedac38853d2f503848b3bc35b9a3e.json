{"ast":null,"code":"import * as XMPP from \"stanza\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus } from \"../redux/actions/index\";\nlet client;\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); // client.on(\"*\", console.log);\n\n  client.on(\"session:started\", () => {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence(); // setInterval(async () => {\n    //   client\n    //     .ping(username)\n    //     .then((message) => {\n    //       console.log(\"ping send\");\n    //     })\n    //     .catch((error) => {\n    //       console.log(\"ping error\", error);\n    //     });\n    // }, 1000);\n  });\n  client.on(\"auth:failed\", () => {\n    console.log(\"xmpp authentication failed\");\n  });\n  client.on(\"subscribe\", ReceivedPresence => {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, () => console.log(\"subscrption request sent back to\" + ReceivedPresence.from));\n  });\n  client.on(\"presence\", presence => {\n    console.log(\"presence\", presence);\n\n    if (presenc.hasOwnProperty(\"type\")) {\n      console.log(\"user unavailable\");\n    }\n\n    store.dispatch(updateUserStatus(presence.from.split(\"/\")[0]));\n  });\n  client.on(\"unavailable\", presence => {\n    console.log(\"unavavalable\", presence);\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n\n  return client;\n}\nlet roster;\n\nconst getContacts = async () => {\n  let contacts = await client.getRoster();\n  roster = contacts.items;\n};\n\nexport const getRosterItems = () => {\n  return roster;\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","store","updateUserStatus","client","chatClient","username","password","createClient","jid","transports","websocket","bosh","rosterVer","on","console","log","getContacts","sendPresence","ReceivedPresence","acceptSubscription","from","subscribe","presence","presenc","hasOwnProperty","dispatch","split","roster","contacts","getRoster","items","getRosterItems"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,IAAIC,MAAJ;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACrDH,EAAAA,MAAM,GAAGH,IAAI,CAACO,YAAL,CAAkB;AACzBC,IAAAA,GAAG,EAAEH,QADoB;AAEzBC,IAAAA,QAFyB;AAGzBG,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAHa;AAOzBC,IAAAA,SAAS,EAAE;AAPc,GAAlB,CAAT,CADqD,CAUrD;;AACAT,EAAAA,MAAM,CAACU,EAAP,CAAU,iBAAV,EAA6B,MAAM;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAC,IAAAA,WAAW;AACXb,IAAAA,MAAM,CAACc,YAAP,GAHiC,CAIjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAdD;AAgBAd,EAAAA,MAAM,CAACU,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAFD;AAIAZ,EAAAA,MAAM,CAACU,EAAP,CAAU,WAAV,EAAwBK,gBAAD,IAAsB;AAC3CJ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCG,gBAArC;AACAf,IAAAA,MAAM,CAACgB,kBAAP,CAA0BD,gBAAgB,CAACE,IAA3C;AACAjB,IAAAA,MAAM,CAACkB,SAAP,CAAiBH,gBAAgB,CAACE,IAAlC,EAAwC,MACtCN,OAAO,CAACC,GAAR,CAAY,qCAAqCG,gBAAgB,CAACE,IAAlE,CADF;AAGD,GAND;AAOAjB,EAAAA,MAAM,CAACU,EAAP,CAAU,UAAV,EAAuBS,QAAD,IAAc;AAClCR,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBO,QAAxB;;AACA,QAAIC,OAAO,CAACC,cAAR,CAAuB,MAAvB,CAAJ,EAAoC;AAClCV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AACDd,IAAAA,KAAK,CAACwB,QAAN,CAAevB,gBAAgB,CAACoB,QAAQ,CAACF,IAAT,CAAcM,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAD,CAA/B;AACD,GAND;AAOAvB,EAAAA,MAAM,CAACU,EAAP,CAAU,aAAV,EAA0BS,QAAD,IAAc;AACrCR,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,QAA5B;AACD,GAFD,EA7CqD,CAgDrD;AACA;AACA;;AACA,SAAOnB,MAAP;AACD;AAED,IAAIwB,MAAJ;;AACA,MAAMX,WAAW,GAAG,YAAY;AAC9B,MAAIY,QAAQ,GAAG,MAAMzB,MAAM,CAAC0B,SAAP,EAArB;AAEAF,EAAAA,MAAM,GAAGC,QAAQ,CAACE,KAAlB;AACD,CAJD;;AAMA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAOJ,MAAP;AACD,CAFM","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport store from \"../redux/store/store\";\r\nimport { updateUserStatus } from \"../redux/actions/index\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  // client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n    // setInterval(async () => {\r\n    //   client\r\n    //     .ping(username)\r\n    //     .then((message) => {\r\n    //       console.log(\"ping send\");\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.log(\"ping error\", error);\r\n    //     });\r\n    // }, 1000);\r\n  });\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n  client.on(\"presence\", (presence) => {\r\n    console.log(\"presence\", presence);\r\n    if (presenc.hasOwnProperty(\"type\")) {\r\n      console.log(\"user unavailable\");\r\n    }\r\n    store.dispatch(updateUserStatus(presence.from.split(\"/\")[0]));\r\n  });\r\n  client.on(\"unavailable\", (presence) => {\r\n    console.log(\"unavavalable\", presence);\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}