{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var isFormValid = function isFormValid(username, password, accountName) {\n  if (isFormEmpty(username, password, accountName)) {\n    return false;\n  } else {\n    return true;\n  }\n};\nexport var isFormEmpty = function isFormEmpty(username, password, accountName) {\n  return !username.length || !password.length || !accountName;\n};\n\nvar verifyKazooCredentials = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(encriptedCredentials, accountName) {\n    var res, _username;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios.put(AUTH, {\n              data: {\n                credentials: encriptedCredentials,\n                account_name: accountName\n              }\n            });\n\n          case 3:\n            res = _context.sent;\n\n            if (res.status === 201) {\n              console.log(res);\n              _username = res.data.data.owner_id + \"@\" + DOMAIN;\n              doConnection(_username);\n            } else {\n              console.log(\"username or password or accountName wrong\");\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"error: \" + _context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function verifyKazooCredentials(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/chat/pages/auth/signIn/functions.js"],"names":["isFormValid","username","password","accountName","isFormEmpty","length","verifyKazooCredentials","encriptedCredentials","axios","put","AUTH","data","credentials","account_name","res","status","console","log","_username","owner_id","DOMAIN","doConnection"],"mappings":";;AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAqC;AAC9D,MAAIC,WAAW,CAACH,QAAD,EAAWC,QAAX,EAAqBC,WAArB,CAAf,EAAkD;AAChD,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF,CANM;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACH,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAqC;AAC9D,SAAO,CAACF,QAAQ,CAACI,MAAV,IAAoB,CAACH,QAAQ,CAACG,MAA9B,IAAwC,CAACF,WAAhD;AACD,CAFM;;AAIP,IAAMG,sBAAsB;AAAA,sEAAG,iBAAOC,oBAAP,EAA6BJ,WAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXK,KAAK,CAACC,GAAN,CAAUC,IAAV,EAAgB;AAC9BC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,WAAW,EAAEL,oBADT;AAEJM,gBAAAA,YAAY,EAAEV;AAFV;AADwB,aAAhB,CAFW;;AAAA;AAEvBW,YAAAA,GAFuB;;AAS3B,gBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACMI,cAAAA,SAFgB,GAEJJ,GAAG,CAACH,IAAJ,CAASA,IAAT,CAAcQ,QAAd,GAAyB,GAAzB,GAA+BC,MAF3B;AAGtBC,cAAAA,YAAY,CAACH,SAAD,CAAZ;AACD,aAJD,MAIO;AACLF,cAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD;;AAf0B;AAAA;;AAAA;AAAA;AAAA;AAiB3BD,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AAjB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBX,sBAAsB;AAAA;AAAA;AAAA,GAA5B","sourcesContent":["export const isFormValid = (username, password, accountName) => {\r\n  if (isFormEmpty(username, password, accountName)) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const isFormEmpty = (username, password, accountName) => {\r\n  return !username.length || !password.length || !accountName;\r\n};\r\n\r\nconst verifyKazooCredentials = async (encriptedCredentials, accountName) => {\r\n  try {\r\n    let res = await axios.put(AUTH, {\r\n      data: {\r\n        credentials: encriptedCredentials,\r\n        account_name: accountName,\r\n      },\r\n    });\r\n\r\n    if (res.status === 201) {\r\n      console.log(res);\r\n      const _username = res.data.data.owner_id + \"@\" + DOMAIN;\r\n      doConnection(_username);\r\n    } else {\r\n      console.log(\"username or password or accountName wrong\");\r\n    }\r\n  } catch (err) {\r\n    console.log(\"error: \" + err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}