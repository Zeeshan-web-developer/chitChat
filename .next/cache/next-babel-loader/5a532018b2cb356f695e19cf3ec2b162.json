{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat\\\\containers\\\\leftSidebar\\\\contactSearch.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { FormGroup, Input } from \"reactstrap\";\nimport dateTime from \"./datetime\";\nimport Logo from \"./1.jpg\";\nimport _ from \"lodash\";\nimport { Nav, TabContent } from \"reactstrap\";\nimport { fetchUsers, setChatWith, setActiveTab, chatededUsers, addNewUSer, removeRecentUser, updateLastMessageTime, setRoster } from \"../../redux/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass objUser {\n  constructor(id, username, userStatus) {\n    this.id = id;\n    this.username = username;\n    this.userStatus = userStatus;\n  }\n\n}\n\nfunction form() {\n  const dispatch = useDispatch();\n  const jid = useSelector(state => state.user.currentUser.jid);\n  var jidLoggedInUser = jid && jid.split(\"@\")[0];\n  const usersP = useSelector(state => state.user.users);\n  const filteredUsers = usersP.length > 0 && usersP[0].filter(user => user.id !== jidLoggedInUser);\n  const recentUsers = useSelector(state => state.user.chatedUsers);\n  const {\n    0: searchTerm,\n    1: setSearch\n  } = useState(null);\n  const {\n    0: chatSubTab,\n    1: setChatSubTab\n  } = useState(\"contacts\");\n  const client = useSelector(state => state.user.client);\n  let alluserStatus = useSelector(state => state.user.alluserStatus);\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []); // var mergedList = _.map(filteredUsers, function (item) {\n  //   return _.extend(item, _.findWhere(alluserStatus, { id: item.id }));\n  // });\n\n  let newArray = [];\n\n  for (let obj1 of filteredUsers) {\n    for (let obj2 of alluserStatus) {\n      if (obj2.id === obj1.id) {\n        let obj = new objUser(obj1.id, obj1.first_name, obj2.onlineStatus);\n        newArray.push(obj);\n      }\n    }\n  }\n\n  const addNew = (item, e) => {\n    let found = false;\n    let foundID;\n    /* SEARCH CONTACT IN CHAT TAB  RETURN:TRUE IF PRESENT,RETURN FALSE IF NOT PRESENT */\n\n    for (var i = 0; i < recentUsers.length; i++) {\n      if (recentUsers[i].id === item.id) {\n        found = true;\n        foundID = recentUsers[i].id;\n        break;\n      }\n    }\n    /* if contact is present append messages */\n\n\n    if (found) {\n      let objIndex = recentUsers.findIndex(obj => obj.id == foundID);\n      dispatch(updateLastMessageTime({\n        id: objIndex,\n        time: dateTime()\n      }));\n    }\n    /* If not present in chat section.if any other is present without mesg attribute remove first then add*/\n\n\n    if (!found) {\n      recentUsers.map(ci => {\n        if (!ci.hasOwnProperty(\"mesg\")) {\n          dispatch(removeRecentUser(ci.id));\n        }\n      });\n      dispatch(addNewUSer({\n        id: item.id,\n        first_name: item.first_name,\n        status: \"online\",\n        mesg: `msg at ${dateTime()}`,\n        onlineStatus: \"online\",\n        lastMessageAt: dateTime()\n      }));\n    }\n  };\n\n  const changeChatClick = e => {\n    document.querySelectorAll(\".chat-main li\").forEach(item => {\n      item.classList.remove(\"active\");\n    });\n    e.currentTarget.classList.add(\"active\");\n    document.querySelector(\".sidebar-toggle\").classList.add(\"mobile-menu\");\n  };\n\n  const addToRoster = async item => {\n    let jidd = item.id + \"@mongoose.mysmartpbx.org\";\n    console.log(\"jid\", jidd);\n    let contacts1 = await client.getRoster();\n    console.log(\"contacts1\", contacts1);\n    let length = contacts1.items.length;\n    let found = false;\n    length > 0 && contacts1.items.map(user => {\n      if (user.jid === jidd) {\n        console.log(\"user is in my  roster\");\n        found = true;\n      }\n    });\n\n    if (!found) {\n      console.log(\"not found\", client);\n      let obj = {\n        jid: jidd,\n        name: item.first_name,\n        groups: []\n      };\n      client.updateRosterItem(obj); // dispatch(setRoster(obj));\n\n      setTimeout(() => {\n        client.subscribe(jidd, () => console.log(\"subscrption request sent\"));\n        acceptRequest();\n      }, 1000);\n    }\n  };\n\n  const acceptRequest = () => {\n    console.log(\"listening\");\n    client.on(\"subscribe\", ReceivedPresence => client.acceptSubscription(ReceivedPresence.from));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"email\",\n        name: \"email\",\n        type: \"search\",\n        placeholder: \"Search\",\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-tab\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        tabs: true,\n        id: \"myTab1\",\n        role: \"tablist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabContent, {\n        activeTab: chatSubTab,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-main\",\n          children: filteredUsers.length > 0 && filteredUsers.filter(data => {\n            if (searchTerm == null) {\n              return data;\n            } else if (data.first_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n              return data;\n            }\n          }).map((chatlist, i) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `${1 === chatlist.id ? \"active\" : \"\"}`,\n              onClick: e => {\n                changeChatClick(e, chatlist);\n                dispatch(setChatWith(chatlist.first_name));\n                dispatch(setActiveTab(\"chat\"));\n                dispatch(chatededUsers(\"new\"));\n                addNew(chatlist, e);\n                addToRoster(chatlist);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `profile online`,\n                  style: {\n                    backgroundImage: `url(${Logo})`,\n                    backgroundSize: \"cover\",\n                    backgroundPosition: \"center\",\n                    display: \"block\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"bg-img\",\n                    src: Logo,\n                    alt: \"Avatar\",\n                    style: {\n                      display: \"none\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: chatlist.first_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-status\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"ti-pin2\",\n                    onClick: e => Tipin(e)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 23\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\nexport default form;","map":{"version":3,"sources":["D:/chat/containers/leftSidebar/contactSearch.js"],"names":["React","useEffect","useSelector","useDispatch","useState","FormGroup","Input","dateTime","Logo","_","Nav","TabContent","fetchUsers","setChatWith","setActiveTab","chatededUsers","addNewUSer","removeRecentUser","updateLastMessageTime","setRoster","objUser","constructor","id","username","userStatus","form","dispatch","jid","state","user","currentUser","jidLoggedInUser","split","usersP","users","filteredUsers","length","filter","recentUsers","chatedUsers","searchTerm","setSearch","chatSubTab","setChatSubTab","client","alluserStatus","newArray","obj1","obj2","obj","first_name","onlineStatus","push","addNew","item","e","found","foundID","i","objIndex","findIndex","time","map","ci","hasOwnProperty","status","mesg","lastMessageAt","changeChatClick","document","querySelectorAll","forEach","classList","remove","currentTarget","add","querySelector","addToRoster","jidd","console","log","contacts1","getRoster","items","name","groups","updateRosterItem","setTimeout","subscribe","acceptRequest","on","ReceivedPresence","acceptSubscription","from","target","value","data","toLowerCase","includes","chatlist","backgroundImage","backgroundSize","backgroundPosition","display","Tipin"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport { FormGroup, Input } from \"reactstrap\";\r\nimport dateTime from \"./datetime\";\r\nimport Logo from \"./1.jpg\";\r\nimport _ from \"lodash\";\r\nimport { Nav, TabContent } from \"reactstrap\";\r\nimport {\r\n  fetchUsers,\r\n  setChatWith,\r\n  setActiveTab,\r\n  chatededUsers,\r\n  addNewUSer,\r\n  removeRecentUser,\r\n  updateLastMessageTime,\r\n  setRoster,\r\n} from \"../../redux/actions/index\";\r\n\r\nclass objUser {\r\n  constructor(id, username, userStatus) {\r\n    this.id = id;\r\n    this.username = username;\r\n    this.userStatus = userStatus;\r\n  }\r\n}\r\n\r\nfunction form() {\r\n  const dispatch = useDispatch();\r\n  const jid = useSelector((state) => state.user.currentUser.jid);\r\n  var jidLoggedInUser = jid && jid.split(\"@\")[0];\r\n  const usersP = useSelector((state) => state.user.users);\r\n  const filteredUsers =\r\n    usersP.length > 0 &&\r\n    usersP[0].filter((user) => user.id !== jidLoggedInUser);\r\n  const recentUsers = useSelector((state) => state.user.chatedUsers);\r\n  const [searchTerm, setSearch] = useState(null);\r\n  const [chatSubTab, setChatSubTab] = useState(\"contacts\");\r\n  const client = useSelector((state) => state.user.client);\r\n  let alluserStatus = useSelector((state) => state.user.alluserStatus);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUsers());\r\n  }, []);\r\n\r\n  // var mergedList = _.map(filteredUsers, function (item) {\r\n  //   return _.extend(item, _.findWhere(alluserStatus, { id: item.id }));\r\n  // });\r\n\r\n  let newArray = [];\r\n  for (let obj1 of filteredUsers) {\r\n    for (let obj2 of alluserStatus) {\r\n      if (obj2.id === obj1.id) {\r\n        let obj = new objUser(obj1.id, obj1.first_name, obj2.onlineStatus);\r\n        newArray.push(obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addNew = (item, e) => {\r\n    let found = false;\r\n    let foundID;\r\n    /* SEARCH CONTACT IN CHAT TAB  RETURN:TRUE IF PRESENT,RETURN FALSE IF NOT PRESENT */\r\n    for (var i = 0; i < recentUsers.length; i++) {\r\n      if (recentUsers[i].id === item.id) {\r\n        found = true;\r\n        foundID = recentUsers[i].id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    /* if contact is present append messages */\r\n    if (found) {\r\n      let objIndex = recentUsers.findIndex((obj) => obj.id == foundID);\r\n      dispatch(updateLastMessageTime({ id: objIndex, time: dateTime() }));\r\n    }\r\n    /* If not present in chat section.if any other is present without mesg attribute remove first then add*/\r\n    if (!found) {\r\n      recentUsers.map((ci) => {\r\n        if (!ci.hasOwnProperty(\"mesg\")) {\r\n          dispatch(removeRecentUser(ci.id));\r\n        }\r\n      });\r\n      dispatch(\r\n        addNewUSer({\r\n          id: item.id,\r\n          first_name: item.first_name,\r\n          status: \"online\",\r\n          mesg: `msg at ${dateTime()}`,\r\n          onlineStatus: \"online\",\r\n          lastMessageAt: dateTime(),\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const changeChatClick = (e) => {\r\n    document.querySelectorAll(\".chat-main li\").forEach((item) => {\r\n      item.classList.remove(\"active\");\r\n    });\r\n    e.currentTarget.classList.add(\"active\");\r\n    document.querySelector(\".sidebar-toggle\").classList.add(\"mobile-menu\");\r\n  };\r\n\r\n  const addToRoster = async (item) => {\r\n    let jidd = item.id + \"@mongoose.mysmartpbx.org\";\r\n    console.log(\"jid\", jidd);\r\n    let contacts1 = await client.getRoster();\r\n    console.log(\"contacts1\", contacts1);\r\n    let length = contacts1.items.length;\r\n    let found = false;\r\n    length > 0 &&\r\n      contacts1.items.map((user) => {\r\n        if (user.jid === jidd) {\r\n          console.log(\"user is in my  roster\");\r\n          found = true;\r\n        }\r\n      });\r\n\r\n    if (!found) {\r\n      console.log(\"not found\", client);\r\n      let obj = {\r\n        jid: jidd,\r\n        name: item.first_name,\r\n        groups: [],\r\n      };\r\n      client.updateRosterItem(obj);\r\n      // dispatch(setRoster(obj));\r\n      setTimeout(() => {\r\n        client.subscribe(jidd, () => console.log(\"subscrption request sent\"));\r\n        acceptRequest();\r\n      }, 1000);\r\n    }\r\n  };\r\n  const acceptRequest = () => {\r\n    console.log(\"listening\");\r\n    client.on(\"subscribe\", (ReceivedPresence) =>\r\n      client.acceptSubscription(ReceivedPresence.from)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <FormGroup>\r\n        <Input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </FormGroup>\r\n      <div className=\"theme-tab\">\r\n        <Nav tabs id=\"myTab1\" role=\"tablist\"></Nav>\r\n        <TabContent activeTab={chatSubTab}>\r\n          <ul className=\"chat-main\">\r\n            {filteredUsers.length > 0 &&\r\n              filteredUsers\r\n                .filter((data) => {\r\n                  if (searchTerm == null) {\r\n                    return data;\r\n                  } else if (\r\n                    data.first_name\r\n                      .toLowerCase()\r\n                      .includes(searchTerm.toLowerCase())\r\n                  ) {\r\n                    return data;\r\n                  }\r\n                })\r\n                .map((chatlist, i) => {\r\n                  return (\r\n                    <li\r\n                      className={`${1 === chatlist.id ? \"active\" : \"\"}`}\r\n                      key={i}\r\n                      onClick={(e) => {\r\n                        changeChatClick(e, chatlist);\r\n                        dispatch(setChatWith(chatlist.first_name));\r\n                        dispatch(setActiveTab(\"chat\"));\r\n                        dispatch(chatededUsers(\"new\"));\r\n                        addNew(chatlist, e);\r\n                        addToRoster(chatlist);\r\n                      }}\r\n                    >\r\n                      <div className=\"chat-box\">\r\n                        <div\r\n                          className={`profile online`}\r\n                          style={{\r\n                            backgroundImage: `url(${Logo})`,\r\n                            backgroundSize: \"cover\",\r\n                            backgroundPosition: \"center\",\r\n                            display: \"block\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"bg-img\"\r\n                            src={Logo}\r\n                            alt=\"Avatar\"\r\n                            style={{ display: \"none\" }}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"details\">\r\n                          <h5>{chatlist.first_name}</h5>\r\n                          {/* <h6>{chatlist.mesg}</h6> */}\r\n                        </div>\r\n                        <div className=\"date-status\">\r\n                          <i className=\"ti-pin2\" onClick={(e) => Tipin(e)}></i>\r\n                          {/* <h6>{chatlist.lastSeenDate}</h6> */}\r\n                          {/* {chatlist.status === \"Sending\" || \"Failed\" || \"Seen\" ? (\r\n                      <h6\r\n                        className={`${\r\n                          chatlist.status === \"Sending\"\r\n                            ? \"font-dark\"\r\n                            : chatlist.status === \"Failed\"\r\n                            ? \"font-danger\"\r\n                            : \"font-success\"\r\n                        }  status`}\r\n                      >\r\n                        {chatlist.status === \"8\" ? \"\" : chatlist.status}\r\n                      </h6>\r\n                    ) : (\r\n                      \"\"\r\n                    )} */}\r\n                          {/* {chatlist.status === \"8\" ? (\r\n                      <div className=\"badge badge-primary sm\">\r\n                        {chatlist.status}\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )} */}\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  );\r\n                })}\r\n          </ul>\r\n        </TabContent>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default form;\r\n"]},"metadata":{},"sourceType":"module"}