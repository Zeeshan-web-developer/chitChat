{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport axios from \"../../api/index\";\nimport Cookies from \"universal-cookie\";\nconst id = \"fbdcd3c94af9ffaa12f0ff4308d3b9bd\";\nconst cookies = new Cookies();\nconst cokie = cookies.get(\"credentials\");\nexport const setUser = user => ({\n  type: actionTypes.SET_USER,\n  payload: user\n});\nexport const setUSerStatus = userStatus => ({\n  type: actionTypes.SET_USER_STATUS,\n  payload: userStatus\n});\nexport const setClient = client => ({\n  type: actionTypes.SET_CLIENT,\n  payload: client\n});\nexport const setLoginError = error => ({\n  type: actionTypes.LOGIN_ERROR,\n  payload: error\n});\nexport const loginLoding = status => ({\n  type: actionTypes.LOGIN_LODING,\n  payload: status\n});\nexport const logout = status => ({\n  type: actionTypes.ON_LOGOUT,\n  payload: status\n});\nexport const setActiveTab = tab => ({\n  type: actionTypes.SET_ACTIVE_TAB,\n  payload: tab\n});\nexport const setChatWith = username => ({\n  type: actionTypes.SET_CHAT_WITH,\n  payload: username\n});\nexport const chatededUsers = nav => ({\n  type: actionTypes.SET_CHATED_USERS,\n  payload: nav\n});\nexport const unmountComponent = any => ({\n  type: actionTypes.CHAT_COMPONENT_UNMOUNT,\n  payload: any\n});\nexport const addNewUSer = payload => ({\n  type: actionTypes.ADD_NEW_USER,\n  payload: payload\n});\nexport const removeRecentUser = id => ({\n  type: actionTypes.REMOVE_USER,\n  payload: id\n});\nexport const updateLastMessageTime = payload => ({\n  type: actionTypes.LAST_MESSAGE_TIME,\n  payload: {\n    id: payload.id,\n    time: payload.time\n  }\n});\nexport const setLastMessage = payload => ({\n  type: actionTypes.SET_LAST_MESSAGE,\n  payload: {\n    id: payload.id,\n    lastMessage: payload.message,\n    time: payload.time\n  }\n});\nexport const setRoster = contacts => ({\n  type: actionTypes.SET_ROSTER,\n  payload: contacts\n});\nexport const updateUserStatus = payload => ({\n  type: actionTypes.UPDATE_USER_STATUS,\n  payload: {\n    id: payload.id,\n    onlineStatus: payload.onlineStatus\n  }\n});\nexport const updateRecentUserStatus = payload => ({\n  type: actionTypes.UPDATE_RECENT_USER_STATUS,\n  payload: {\n    id: payload.id,\n    onlineStatus: payload.onlineStatus\n  }\n});\nexport const setAllUsers = payload => ({\n  type: actionTypes.SET_ALL_USERS,\n  payload: payload\n});\nexport const setNewMessage = payload => ({\n  type: actionTypes.SET_NEW_MESSAGE,\n  payload\n});\nexport const fetchUsers = () => {\n  try {\n    return async dispatch => {\n      const response = await axios.get(`accounts/${id}/users`, {\n        headers: {\n          \"x-auth-token\": cokie.AuthToken\n        }\n      });\n      dispatch({\n        type: actionTypes.SET_USERS,\n        payload: response.data.data\n      });\n    };\n  } catch (err) {\n    dispatch({\n      type: actionTypes.LOGIN_ERROR,\n      payload: \"error in fetching users\"\n    });\n  }\n};","map":{"version":3,"sources":["D:/chat/redux/actions/index.js"],"names":["actionTypes","axios","Cookies","id","cookies","cokie","get","setUser","user","type","SET_USER","payload","setUSerStatus","userStatus","SET_USER_STATUS","setClient","client","SET_CLIENT","setLoginError","error","LOGIN_ERROR","loginLoding","status","LOGIN_LODING","logout","ON_LOGOUT","setActiveTab","tab","SET_ACTIVE_TAB","setChatWith","username","SET_CHAT_WITH","chatededUsers","nav","SET_CHATED_USERS","unmountComponent","any","CHAT_COMPONENT_UNMOUNT","addNewUSer","ADD_NEW_USER","removeRecentUser","REMOVE_USER","updateLastMessageTime","LAST_MESSAGE_TIME","time","setLastMessage","SET_LAST_MESSAGE","lastMessage","message","setRoster","contacts","SET_ROSTER","updateUserStatus","UPDATE_USER_STATUS","onlineStatus","updateRecentUserStatus","UPDATE_RECENT_USER_STATUS","setAllUsers","SET_ALL_USERS","setNewMessage","SET_NEW_MESSAGE","fetchUsers","dispatch","response","headers","AuthToken","SET_USERS","data","err"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./types\";\r\nimport axios from \"../../api/index\";\r\nimport Cookies from \"universal-cookie\";\r\nconst id = \"fbdcd3c94af9ffaa12f0ff4308d3b9bd\";\r\nconst cookies = new Cookies();\r\nconst cokie = cookies.get(\"credentials\");\r\n\r\nexport const setUser = (user) => ({\r\n  type: actionTypes.SET_USER,\r\n  payload: user,\r\n});\r\n\r\nexport const setUSerStatus = (userStatus) => ({\r\n  type: actionTypes.SET_USER_STATUS,\r\n  payload: userStatus,\r\n});\r\n\r\nexport const setClient = (client) => ({\r\n  type: actionTypes.SET_CLIENT,\r\n  payload: client,\r\n});\r\n\r\nexport const setLoginError = (error) => ({\r\n  type: actionTypes.LOGIN_ERROR,\r\n  payload: error,\r\n});\r\nexport const loginLoding = (status) => ({\r\n  type: actionTypes.LOGIN_LODING,\r\n  payload: status,\r\n});\r\nexport const logout = (status) => ({\r\n  type: actionTypes.ON_LOGOUT,\r\n  payload: status,\r\n});\r\nexport const setActiveTab = (tab) => ({\r\n  type: actionTypes.SET_ACTIVE_TAB,\r\n  payload: tab,\r\n});\r\n\r\nexport const setChatWith = (username) => ({\r\n  type: actionTypes.SET_CHAT_WITH,\r\n  payload: username,\r\n});\r\n\r\nexport const chatededUsers = (nav) => ({\r\n  type: actionTypes.SET_CHATED_USERS,\r\n  payload: nav,\r\n});\r\n\r\nexport const unmountComponent = (any) => ({\r\n  type: actionTypes.CHAT_COMPONENT_UNMOUNT,\r\n  payload: any,\r\n});\r\n\r\nexport const addNewUSer = (payload) => ({\r\n  type: actionTypes.ADD_NEW_USER,\r\n  payload: payload,\r\n});\r\n\r\nexport const removeRecentUser = (id) => ({\r\n  type: actionTypes.REMOVE_USER,\r\n  payload: id,\r\n});\r\n\r\nexport const updateLastMessageTime = (payload) => ({\r\n  type: actionTypes.LAST_MESSAGE_TIME,\r\n  payload: {\r\n    id: payload.id,\r\n    time: payload.time,\r\n  },\r\n});\r\n\r\nexport const setLastMessage = (payload) => ({\r\n  type: actionTypes.SET_LAST_MESSAGE,\r\n  payload: {\r\n    id: payload.id,\r\n    lastMessage: payload.message,\r\n    time: payload.time,\r\n  },\r\n});\r\n\r\nexport const setRoster = (contacts) => ({\r\n  type: actionTypes.SET_ROSTER,\r\n  payload: contacts,\r\n});\r\n\r\nexport const updateUserStatus = (payload) => ({\r\n  type: actionTypes.UPDATE_USER_STATUS,\r\n  payload: {\r\n    id: payload.id,\r\n    onlineStatus: payload.onlineStatus,\r\n  },\r\n});\r\n\r\nexport const updateRecentUserStatus = (payload) => ({\r\n  type: actionTypes.UPDATE_RECENT_USER_STATUS,\r\n  payload: {\r\n    id: payload.id,\r\n    onlineStatus: payload.onlineStatus,\r\n  },\r\n});\r\n\r\nexport const setAllUsers = (payload) => ({\r\n  type: actionTypes.SET_ALL_USERS,\r\n  payload: payload,\r\n});\r\n\r\nexport const setNewMessage = (payload) => ({\r\n  type: actionTypes.SET_NEW_MESSAGE,\r\n  payload,\r\n});\r\n\r\nexport const fetchUsers = () => {\r\n  try {\r\n    return async (dispatch) => {\r\n      const response = await axios.get(`accounts/${id}/users`, {\r\n        headers: {\r\n          \"x-auth-token\": cokie.AuthToken,\r\n        },\r\n      });\r\n      dispatch({ type: actionTypes.SET_USERS, payload: response.data.data });\r\n    };\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.LOGIN_ERROR,\r\n      payload: \"error in fetching users\",\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}