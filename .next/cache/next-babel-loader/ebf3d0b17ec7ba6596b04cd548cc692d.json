{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from \"../actions/types\";\nimport { combineReducers } from \"redux\";\nimport update from \"react-addons-update\";\nconst initialState = {\n  currentUser: {\n    username: null,\n    accountId: null,\n    jid: null\n  },\n  accountId: null,\n  userStatus: \"unavailable\",\n  client: null,\n  loginErrors: [],\n  loading: false,\n  activeTab: \"chat\",\n  users: [],\n  chatWith: {\n    name: \"A\",\n    status: \"online\"\n  },\n  newContact: \"contact\",\n  componentUnmount: null,\n  roster: \"\",\n  alluserStatus: [],\n  allusers: [],\n  messages: [{\n    from: 2,\n    to: 1,\n    messageTime: \"2021-08-07 09:03:10\",\n    messageBody: \"hello dear\",\n    chatType: \"chat\",\n    direction: \"received\"\n  }, {\n    from: 2,\n    to: 1,\n    messageTime: \"2021-08-07 09:03:10\",\n    messageBody: \"hello dear\",\n    chatType: \"chat\",\n    direction: \"send\"\n  }],\n  chatedUsers: [{\n    id: 1,\n    first_name: \"JACKILINE\",\n    status: \"online\",\n    mesg: \"how are you\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    lastMessageAt: \"2021-08-07 09:03:10\"\n  }, {\n    id: 2,\n    first_name: \"BRONNNZE\",\n    status: \"offline\",\n    mesg: \"how are you\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"offline\",\n    lastMessageAt: \"2021-08-07 09:03:56\"\n  }]\n};\n\nconst user_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentUser: action.payload\n      });\n\n    case actionTypes.SET_USER_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userStatus: action.payload\n      });\n\n    case actionTypes.SET_CLIENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        client: action.payload\n      });\n\n    case actionTypes.LOGIN_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginErrors: [action.payload]\n      });\n\n    case actionTypes.LOGIN_LODING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: action.payload\n      });\n\n    case actionTypes.SET_ACTIVE_TAB:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeTab: action.payload\n      });\n\n    case actionTypes.SET_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        users: [action.payload]\n      });\n\n    case actionTypes.SET_CHAT_WITH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatWith: action.payload\n      });\n\n    case \"ALL_Messages\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        messages: action.payload\n      });\n\n    case actionTypes.SET_CHATED_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        newContact: action.payload\n      });\n\n    case actionTypes.CHAT_COMPONENT_UNMOUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        componentUnmount: action.payload\n      });\n\n    case actionTypes.ADD_NEW_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatedUsers: [action.payload, ...state.chatedUsers]\n      });\n\n    case actionTypes.REMOVE_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatedUsers: state.chatedUsers.filter(user => user.id !== action.payload)\n      });\n\n    case actionTypes.LAST_MESSAGE_TIME:\n      return update(state, {\n        chatedUsers: {\n          [action.payload.id]: {\n            lastMessageAt: {\n              $set: action.payload.time\n            }\n          }\n        }\n      });\n\n    case actionTypes.SET_ROSTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roster: [...state.roster, action.payload]\n      });\n\n    case actionTypes.SET_ALL_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allusers: action.payload\n      });\n\n    case actionTypes.UPDATE_USER_STATUS:\n      console.log(\"inside reducer\");\n      let found = state.alluserStatus && state.alluserStatus.length ? !!state.alluserStatus.find(u => u.id === action.payload.id) : false; //if the user is already\n\n      if (found) {\n        console.log(\"user alredy already exists\");\n        return _objectSpread(_objectSpread({}, state), {}, {\n          alluserStatus: state.alluserStatus.map((userStatus, i) => userStatus.id === action.payload.id ? _objectSpread(_objectSpread({}, userStatus), {}, {\n            onlineStatus: action.payload.onlineStatus\n          }) : userStatus)\n        }); //update the user status for fist time\n      } else {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          alluserStatus: [...state.alluserStatus, action.payload]\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/chat/redux/reducers/index.js"],"names":["actionTypes","combineReducers","update","initialState","currentUser","username","accountId","jid","userStatus","client","loginErrors","loading","activeTab","users","chatWith","name","status","newContact","componentUnmount","roster","alluserStatus","allusers","messages","from","to","messageTime","messageBody","chatType","direction","chatedUsers","id","first_name","mesg","lastSeenDate","onlineStatus","lastMessageAt","user_reducer","state","action","type","SET_USER","payload","SET_USER_STATUS","SET_CLIENT","LOGIN_ERROR","LOGIN_LODING","SET_ACTIVE_TAB","SET_USERS","SET_CHAT_WITH","SET_CHATED_USERS","CHAT_COMPONENT_UNMOUNT","ADD_NEW_USER","REMOVE_USER","filter","user","LAST_MESSAGE_TIME","$set","time","SET_ROSTER","SET_ALL_USERS","UPDATE_USER_STATUS","console","log","found","length","find","u","map","i","rootReducer"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/types\";\r\nimport { combineReducers } from \"redux\";\r\nimport update from \"react-addons-update\";\r\nconst initialState = {\r\n  currentUser: { username: null, accountId: null, jid: null },\r\n  accountId: null,\r\n  userStatus: \"unavailable\",\r\n  client: null,\r\n  loginErrors: [],\r\n  loading: false,\r\n  activeTab: \"chat\",\r\n  users: [],\r\n  chatWith: { name: \"A\", status: \"online\" },\r\n  newContact: \"contact\",\r\n  componentUnmount: null,\r\n  roster: \"\",\r\n  alluserStatus: [],\r\n  allusers: [],\r\n  messages: [\r\n    {\r\n      from: 2,\r\n      to: 1,\r\n      messageTime: \"2021-08-07 09:03:10\",\r\n      messageBody: \"hello dear\",\r\n      chatType: \"chat\",\r\n      direction: \"received\",\r\n    },\r\n    {\r\n      from: 2,\r\n      to: 1,\r\n      messageTime: \"2021-08-07 09:03:10\",\r\n      messageBody: \"hello dear\",\r\n      chatType: \"chat\",\r\n      direction: \"send\",\r\n    },\r\n  ],\r\n  chatedUsers: [\r\n    {\r\n      id: 1,\r\n      first_name: \"JACKILINE\",\r\n      status: \"online\",\r\n      mesg: \"how are you\",\r\n      lastSeenDate: \"30/11/19\",\r\n      onlineStatus: \"online\",\r\n      lastMessageAt: \"2021-08-07 09:03:10\",\r\n    },\r\n    {\r\n      id: 2,\r\n      first_name: \"BRONNNZE\",\r\n      status: \"offline\",\r\n      mesg: \"how are you\",\r\n      lastSeenDate: \"30/11/19\",\r\n      onlineStatus: \"offline\",\r\n      lastMessageAt: \"2021-08-07 09:03:56\",\r\n    },\r\n  ],\r\n};\r\nconst user_reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n      };\r\n    case actionTypes.SET_USER_STATUS:\r\n      return {\r\n        ...state,\r\n        userStatus: action.payload,\r\n      };\r\n    case actionTypes.SET_CLIENT:\r\n      return {\r\n        ...state,\r\n        client: action.payload,\r\n      };\r\n    case actionTypes.LOGIN_ERROR:\r\n      return {\r\n        ...state,\r\n        loginErrors: [action.payload],\r\n      };\r\n    case actionTypes.LOGIN_LODING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      };\r\n\r\n    case actionTypes.SET_ACTIVE_TAB:\r\n      return {\r\n        ...state,\r\n        activeTab: action.payload,\r\n      };\r\n    case actionTypes.SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: [action.payload],\r\n      };\r\n    case actionTypes.SET_CHAT_WITH:\r\n      return {\r\n        ...state,\r\n        chatWith: action.payload,\r\n      };\r\n    case \"ALL_Messages\":\r\n      return {\r\n        ...state,\r\n        messages: action.payload,\r\n      };\r\n    case actionTypes.SET_CHATED_USERS:\r\n      return {\r\n        ...state,\r\n        newContact: action.payload,\r\n      };\r\n\r\n    case actionTypes.CHAT_COMPONENT_UNMOUNT:\r\n      return {\r\n        ...state,\r\n        componentUnmount: action.payload,\r\n      };\r\n\r\n    case actionTypes.ADD_NEW_USER:\r\n      return {\r\n        ...state,\r\n\r\n        chatedUsers: [action.payload, ...state.chatedUsers],\r\n      };\r\n    case actionTypes.REMOVE_USER:\r\n      return {\r\n        ...state,\r\n\r\n        chatedUsers: state.chatedUsers.filter(\r\n          (user) => user.id !== action.payload\r\n        ),\r\n      };\r\n\r\n    case actionTypes.LAST_MESSAGE_TIME:\r\n      return update(state, {\r\n        chatedUsers: {\r\n          [action.payload.id]: {\r\n            lastMessageAt: { $set: action.payload.time },\r\n          },\r\n        },\r\n      });\r\n\r\n    case actionTypes.SET_ROSTER:\r\n      return {\r\n        ...state,\r\n        roster: [...state.roster, action.payload],\r\n      };\r\n    case actionTypes.SET_ALL_USERS:\r\n      return {\r\n        ...state,\r\n        allusers: action.payload,\r\n      };\r\n    case actionTypes.UPDATE_USER_STATUS:\r\n      console.log(\"inside reducer\");\r\n      let found =\r\n        state.alluserStatus && state.alluserStatus.length\r\n          ? !!state.alluserStatus.find((u) => u.id === action.payload.id)\r\n          : false;\r\n\r\n      //if the user is already\r\n      if (found) {\r\n        console.log(\"user alredy already exists\");\r\n        return {\r\n          ...state,\r\n          alluserStatus: state.alluserStatus.map((userStatus, i) =>\r\n            userStatus.id === action.payload.id\r\n              ? { ...userStatus, onlineStatus: action.payload.onlineStatus }\r\n              : userStatus\r\n          ),\r\n        };\r\n\r\n        //update the user status for fist time\r\n      } else {\r\n        return {\r\n          ...state,\r\n          alluserStatus: [...state.alluserStatus, action.payload],\r\n        };\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  user: user_reducer,\r\n});\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}