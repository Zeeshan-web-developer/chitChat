{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from \"../actions/types\";\nimport { combineReducers } from \"redux\";\nimport update from \"react-addons-update\";\nconst initialState = {\n  currentUser: {\n    username: null,\n    accountId: null,\n    jid: null\n  },\n  accountId: null,\n  userStatus: \"unavailable\",\n  client: null,\n  loginErrors: [],\n  loading: false,\n  activeTab: \"chat\",\n  users: [],\n  chatWith: \"A\",\n  newContact: \"contact\",\n  componentUnmount: null,\n  roster: \"\",\n  alluserStatus: [],\n  chatedUsers: [{\n    id: 1,\n    first_name: \"JACKILINE\",\n    status: \"online\",\n    mesg: \"how are you\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    lastMessageAt: \"2021-08-07 09:03:10\"\n  }, {\n    id: 2,\n    first_name: \"BRONNNZE\",\n    status: \"offline\",\n    mesg: \"how are you\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"offline\",\n    lastMessageAt: \"2021-08-07 09:03:56\"\n  }]\n};\n\nconst user_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentUser: action.payload\n      });\n\n    case actionTypes.SET_USER_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userStatus: action.payload\n      });\n\n    case actionTypes.SET_CLIENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        client: action.payload\n      });\n\n    case actionTypes.LOGIN_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginErrors: [action.payload]\n      });\n\n    case actionTypes.LOGIN_LODING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: action.payload\n      });\n\n    case actionTypes.SET_ACTIVE_TAB:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeTab: action.payload\n      });\n\n    case actionTypes.SET_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        users: [action.payload]\n      });\n\n    case actionTypes.SET_CHAT_WITH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatWith: action.payload\n      });\n\n    case actionTypes.SET_CHATED_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        newContact: action.payload\n      });\n\n    case actionTypes.CHAT_COMPONENT_UNMOUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        componentUnmount: action.payload\n      });\n\n    case actionTypes.ADD_NEW_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatedUsers: [action.payload, ...state.chatedUsers]\n      });\n\n    case actionTypes.REMOVE_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatedUsers: state.chatedUsers.filter(user => user.id !== action.payload)\n      });\n\n    case actionTypes.LAST_MESSAGE_TIME:\n      return update(state, {\n        chatedUsers: {\n          [action.payload.id]: {\n            lastMessageAt: {\n              $set: action.payload.time\n            }\n          }\n        }\n      });\n\n    case actionTypes.SET_ROSTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roster: [...state.roster, action.payload]\n      });\n\n    case actionTypes.UPDATE_USER_STATUS:\n      var found = false;\n\n      for (var i = 0; i < state.chatedUsers.length; i++) {\n        if (state.chatedUsers[i].id == action.payload.id) {\n          found = true;\n          break;\n        }\n      }\n\n      if (found && chatedUsers) {\n        return update(state, {\n          chatedUsers: {\n            [action.payload.id]: {\n              onlineStatus: {\n                $set: action.payload.onlineStatus\n              }\n            }\n          }\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/chat/redux/reducers/index.js"],"names":["actionTypes","combineReducers","update","initialState","currentUser","username","accountId","jid","userStatus","client","loginErrors","loading","activeTab","users","chatWith","newContact","componentUnmount","roster","alluserStatus","chatedUsers","id","first_name","status","mesg","lastSeenDate","onlineStatus","lastMessageAt","user_reducer","state","action","type","SET_USER","payload","SET_USER_STATUS","SET_CLIENT","LOGIN_ERROR","LOGIN_LODING","SET_ACTIVE_TAB","SET_USERS","SET_CHAT_WITH","SET_CHATED_USERS","CHAT_COMPONENT_UNMOUNT","ADD_NEW_USER","REMOVE_USER","filter","user","LAST_MESSAGE_TIME","$set","time","SET_ROSTER","UPDATE_USER_STATUS","found","i","length","rootReducer"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/types\";\r\nimport { combineReducers } from \"redux\";\r\nimport update from \"react-addons-update\";\r\nconst initialState = {\r\n  currentUser: { username: null, accountId: null, jid: null },\r\n  accountId: null,\r\n  userStatus: \"unavailable\",\r\n  client: null,\r\n  loginErrors: [],\r\n  loading: false,\r\n  activeTab: \"chat\",\r\n  users: [],\r\n  chatWith: \"A\",\r\n  newContact: \"contact\",\r\n  componentUnmount: null,\r\n  roster: \"\",\r\n  alluserStatus: [],\r\n  chatedUsers: [\r\n    {\r\n      id: 1,\r\n      first_name: \"JACKILINE\",\r\n      status: \"online\",\r\n      mesg: \"how are you\",\r\n      lastSeenDate: \"30/11/19\",\r\n      onlineStatus: \"online\",\r\n      lastMessageAt: \"2021-08-07 09:03:10\",\r\n    },\r\n    {\r\n      id: 2,\r\n      first_name: \"BRONNNZE\",\r\n      status: \"offline\",\r\n      mesg: \"how are you\",\r\n      lastSeenDate: \"30/11/19\",\r\n      onlineStatus: \"offline\",\r\n      lastMessageAt: \"2021-08-07 09:03:56\",\r\n    },\r\n  ],\r\n};\r\nconst user_reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n      };\r\n    case actionTypes.SET_USER_STATUS:\r\n      return {\r\n        ...state,\r\n        userStatus: action.payload,\r\n      };\r\n    case actionTypes.SET_CLIENT:\r\n      return {\r\n        ...state,\r\n        client: action.payload,\r\n      };\r\n    case actionTypes.LOGIN_ERROR:\r\n      return {\r\n        ...state,\r\n        loginErrors: [action.payload],\r\n      };\r\n    case actionTypes.LOGIN_LODING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      };\r\n\r\n    case actionTypes.SET_ACTIVE_TAB:\r\n      return {\r\n        ...state,\r\n        activeTab: action.payload,\r\n      };\r\n    case actionTypes.SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: [action.payload],\r\n      };\r\n    case actionTypes.SET_CHAT_WITH:\r\n      return {\r\n        ...state,\r\n        chatWith: action.payload,\r\n      };\r\n    case actionTypes.SET_CHATED_USERS:\r\n      return {\r\n        ...state,\r\n        newContact: action.payload,\r\n      };\r\n\r\n    case actionTypes.CHAT_COMPONENT_UNMOUNT:\r\n      return {\r\n        ...state,\r\n        componentUnmount: action.payload,\r\n      };\r\n\r\n    case actionTypes.ADD_NEW_USER:\r\n      return {\r\n        ...state,\r\n\r\n        chatedUsers: [action.payload, ...state.chatedUsers],\r\n      };\r\n    case actionTypes.REMOVE_USER:\r\n      return {\r\n        ...state,\r\n\r\n        chatedUsers: state.chatedUsers.filter(\r\n          (user) => user.id !== action.payload\r\n        ),\r\n      };\r\n\r\n    case actionTypes.LAST_MESSAGE_TIME:\r\n      return update(state, {\r\n        chatedUsers: {\r\n          [action.payload.id]: {\r\n            lastMessageAt: { $set: action.payload.time },\r\n          },\r\n        },\r\n      });\r\n\r\n    case actionTypes.SET_ROSTER:\r\n      return {\r\n        ...state,\r\n        roster: [...state.roster, action.payload],\r\n      };\r\n\r\n    case actionTypes.UPDATE_USER_STATUS:\r\n      var found = false;\r\n      for (var i = 0; i < state.chatedUsers.length; i++) {\r\n        if (state.chatedUsers[i].id == action.payload.id) {\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found && chatedUsers) {\r\n        return update(state, {\r\n          chatedUsers: {\r\n            [action.payload.id]: {\r\n              onlineStatus: { $set: action.payload.onlineStatus },\r\n            },\r\n          },\r\n        });\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  user: user_reducer,\r\n});\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}