{"ast":null,"code":"import * as XMPP from \"stanza\";\nexport default function (username, password) {\n  var client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    }\n  });\n  client.on(\"session:started\", function () {\n    client.getRoster();\n    client.sendPresence();\n  });\n  client.on(\"auth:failed\", console.log(\"Failed\"));\n  client.on(\"auth:success\", console.log(\"auth success\")); // client.on(\"*\", console.log);\n\n  client.on(\"message\", function (msg) {\n    return console.log(\"Message is as: \" + JSON.stringify(msg));\n  });\n  this.client = client;\n  return client;\n}","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","username","password","client","createClient","jid","transports","websocket","bosh","on","getRoster","sendPresence","console","log","msg","JSON","stringify"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AAEA,eAAe,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAC3C,MAAMC,MAAM,GAAGH,IAAI,CAACI,YAAL,CAAkB;AAC/BC,IAAAA,GAAG,EAAEJ,QAD0B;AAE/BC,IAAAA,QAAQ,EAARA,QAF+B;AAG/BI,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI;AAHmB,GAAlB,CAAf;AAQAL,EAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCN,IAAAA,MAAM,CAACO,SAAP;AACAP,IAAAA,MAAM,CAACQ,YAAP;AACD,GAHD;AAIAR,EAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyBG,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAzB;AACAV,EAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0BG,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA1B,EAd2C,CAe3C;;AACAV,EAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,UAACK,GAAD;AAAA,WACnBF,OAAO,CAACC,GAAR,CAAY,oBAAoBE,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAhC,CADmB;AAAA,GAArB;AAGA,OAAKX,MAAL,GAAcA,MAAd;AACA,SAAOA,MAAP;AACD","sourcesContent":["import * as XMPP from \"stanza\";\r\n\r\nexport default function (username, password) {\r\n  const client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n  });\r\n  client.on(\"session:started\", () => {\r\n    client.getRoster();\r\n    client.sendPresence();\r\n  });\r\n  client.on(\"auth:failed\", console.log(\"Failed\"));\r\n  client.on(\"auth:success\", console.log(\"auth success\"));\r\n  // client.on(\"*\", console.log);\r\n  client.on(\"message\", (msg) =>\r\n    console.log(\"Message is as: \" + JSON.stringify(msg))\r\n  );\r\n  this.client = client;\r\n  return client;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}