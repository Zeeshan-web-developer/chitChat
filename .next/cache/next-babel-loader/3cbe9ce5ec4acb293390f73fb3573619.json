{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat\\\\helpers\\\\chatContext\\\\chatCtx.js\";\nimport React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport { fetchChatMemberApi, fetchChatApi } from '../../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatProvider = props => {\n  const {\n    0: chatMembers,\n    1: setChatMembers\n  } = useState([]);\n  const {\n    0: chats,\n    1: setChats\n  } = useState([]);\n  const currentUserId = 0;\n  const {\n    0: selectedUser,\n    1: setSelectedUser\n  } = useState({\n    \"id\": 0,\n    \"name\": \"Jony Lynetin\",\n    \"thumb\": \"contact/2.jpg\",\n    \"status\": \"8\",\n    \"mesg\": \"Typing................\",\n    \"lastSeenDate\": \"30/11/19\",\n    \"onlineStatus\": \"online\",\n    \"typing\": true\n  });\n  const {\n    0: isTyeping,\n    1: setIsTypeing\n  } = useState(false);\n  useEffect(() => {\n    // get all initial chat users\n    fetchChatMemberApi().then(res => {\n      setChatMembers(res.data);\n\n      if (res) {\n        fetchChatApi().then(chatres => {\n          const selectedUserId = chatres.data[0].users.find(x => x !== currentUserId);\n          const IsselectedUser = res.data.find(x => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    }); // get initial chat between two chat users\n\n    fetchChatApi().then(res => {\n      setChats(res.data);\n\n      if (res) {\n        fetchChatMemberApi().then(memberres => {\n          const selectedUserId = res.data[0].users.find(x => x !== currentUserId);\n          const IsselectedUser = memberres.data.find(x => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []); // chat with user first time\n\n  const createChat = (currentUserId, selectedUserId, chats, onlineStatus) => {\n    let conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus\n    };\n    chats.splice(0, 0, conversation);\n    const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n    setChats([...chats]);\n    setSelectedUser(selectedUser);\n  }; // change existing chat between two chat users\n\n\n  const changeChat = userId => {\n    const selectedUser = chatMembers.find(x => x.id === userId);\n    setSelectedUser(selectedUser);\n  }; // send message to selected chat users\n\n\n  const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // reply message to selected chat users\n\n\n  const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: replyMessage,\n        read: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = '';\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      selectedUser.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // send stickers or images\n\n\n  const sendImages = (currentUserId, selectedUserId, image, chats) => {\n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)); // find selected chat User Id\n\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = '';\n      let chats_data = chats.filter(x => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find(x => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n\n      setSelectedUser(selectedUser);\n    }\n  }; // when chat user replied to our message existing tyeping loader\n\n\n  const typingMessage = typeing => {\n    setIsTypeing(typeing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      chatMembers: chatMembers,\n      chats: chats,\n      currentUser: chatMembers[0],\n      selectedUser: selectedUser,\n      isTyeping: isTyeping,\n      changeChat: changeChat,\n      createChat: createChat,\n      sendMessage: sendMessage,\n      replyMessage: replyMessage,\n      sendImages: sendImages,\n      typingMessage: typingMessage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ChatProvider;","map":{"version":3,"sources":["D:/chat/helpers/chatContext/chatCtx.js"],"names":["React","useState","useEffect","Context","fetchChatMemberApi","fetchChatApi","ChatProvider","props","chatMembers","setChatMembers","chats","setChats","currentUserId","selectedUser","setSelectedUser","isTyeping","setIsTypeing","then","res","data","chatres","selectedUserId","users","find","x","IsselectedUser","id","memberres","createChat","onlineStatus","conversation","length","lastMessageTime","messages","stickers","splice","changeChat","userId","sendMessage","messageInput","chat","includes","now","Date","time","getHours","getMinutes","push","sender","text","status","chats_data","filter","replyMessage","read","online","sendImages","image","typingMessage","typeing","currentUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport {fetchChatMemberApi,fetchChatApi} from '../../api/index'\n\nconst ChatProvider = (props) => {\n\n    const [chatMembers,setChatMembers] = useState([])\n    const [chats,setChats] = useState([])\n    const currentUserId = 0;\n    const [selectedUser,setSelectedUser] = useState({\n        \"id\": 0,\n        \"name\": \"Jony Lynetin\",\n        \"thumb\": \"contact/2.jpg\",\n        \"status\": \"8\",\n        \"mesg\":\"Typing................\",\n        \"lastSeenDate\": \"30/11/19\",\n        \"onlineStatus\": \"online\",\n        \"typing\": true\n    })\n    const [isTyeping,setIsTypeing] = useState(false)\n\n    useEffect(() => {\n        // get all initial chat users\n        fetchChatMemberApi().then(res => {\n            setChatMembers(res.data)\n            if(res) {\n                fetchChatApi().then(chatres => {\n                    const selectedUserId = chatres.data[0].users.find(x => x !== currentUserId);\n                    const IsselectedUser = res.data.find(x => x.id === selectedUserId)\n                    setSelectedUser(IsselectedUser)\n                })\n            }\n            }\n        )\n        // get initial chat between two chat users\n        fetchChatApi().then(res => {\n            setChats(res.data)\n            if(res){\n                fetchChatMemberApi().then(memberres => {\n                    const selectedUserId = res.data[0].users.find(x => x !== currentUserId);\n                    const IsselectedUser = memberres.data.find(x => x.id === selectedUserId)\n                    setSelectedUser(IsselectedUser)\n                }) \n            }\n        })\n        \n    },[])\n\n    // chat with user first time\n    const createChat = (currentUserId, selectedUserId, chats,onlineStatus) => {\n        let conversation = {\n            id: chats.length + 1,\n            users: [currentUserId, selectedUserId],\n            lastMessageTime: \"-\",\n            messages: [],\n            stickers:[],\n            onlineStatus:onlineStatus\n        };\n        chats.splice(0, 0, conversation)\n        const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n        setChats([...chats])\n        setSelectedUser(selectedUser)\n    }\n\n    // change existing chat between two chat users\n    const changeChat = (userId) => {\n        const selectedUser = chatMembers.find(x => x.id === userId)\n        setSelectedUser(selectedUser)\n    }\n\n    // send message to selected chat users\n    const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.messages.push({\n                sender: currentUserId,\n                time: time,\n                text: messageInput,\n                status:true\n            });\n            chat.lastMessageTime = time;\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser)\n        }\n        \n    }\n\n    // reply message to selected chat users\n    const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.messages.push({\n                sender: selectedUserId,\n                time: time,\n                text: replyMessage,\n                read:true\n            });\n            chat.lastMessageTime = time;\n            chat.online = '';\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            selectedUser.onlineStatus = \"online\" // chat user reply the message then set selected chat user  status to \"online\"\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser)\n        }\n    }\n\n    // send stickers or images\n    const sendImages = (currentUserId, selectedUserId, image, chats) => {\n        let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)) // find selected chat User Id\n        const now = new Date();\n        const time =  now.getHours() + \":\" + now.getMinutes();\n        if (chat) {\n            chat.stickers.push({\n                sender: currentUserId,\n                time: time,\n                stickers: image,\n                status:true\n            });\n            chat.lastMessageTime = time;\n            chat.online = '';\n            let chats_data = (chats.filter(x => x.id !== chat.id));\n            chats_data.splice(0, 0, chat)\n            const selectedUser = chatMembers.find(x => x.id === selectedUserId)\n            setChats([...chats]) // update chats messages\n            setSelectedUser(selectedUser) \n        }\n    }\n\n    // when chat user replied to our message existing tyeping loader\n    const typingMessage = (typeing) => {\n        setIsTypeing(typeing)\n    }\n\n    return(\n    <Context.Provider value={{\n        chatMembers:chatMembers,\n        chats : chats,\n        currentUser:chatMembers[0],\n        selectedUser:selectedUser,\n        isTyeping:isTyeping,\n        changeChat:changeChat,\n        createChat:createChat,\n        sendMessage:sendMessage,\n        replyMessage:replyMessage,\n        sendImages:sendImages,\n        typingMessage:typingMessage\n    }}>\n        {props.children}\n    </Context.Provider>\n    )\n}\n\nexport default ChatProvider;"]},"metadata":{},"sourceType":"module"}