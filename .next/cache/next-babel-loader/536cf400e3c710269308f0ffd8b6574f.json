{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport * as XMPP from \"stanza\";\n\nvar ChatClient = /*#__PURE__*/function () {\n  function ChatClient(onAuthFailed, onAuthSuccess, onMessage) {\n    _classCallCheck(this, ChatClient);\n\n    this.onAuthFailed = onAuthFailed;\n    this.onAuthSuccess = onAuthSuccess;\n    this.onMessage = onMessage;\n  }\n\n  _createClass(ChatClient, [{\n    key: \"create\",\n    value: function create(_ref) {\n      var username = _ref.username,\n          password = _ref.password;\n      var client = XMPP.createClient({\n        jid: username,\n        password: password,\n        transports: {\n          websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n          bosh: \"false\"\n        }\n      });\n      client.on(\"session:started\", function () {\n        client.getRoster();\n        client.sendPresence();\n      });\n      client.on(\"auth:failed\", this.onAuthFailed);\n      client.on(\"auth:success\", this.onAuthSuccess); // client.on(\"*\", console.log);\n\n      client.on(\"message\", this.onMessage);\n      client.on(\"message\", function (msg) {\n        return console.log(\"Message is as: \" + JSON.stringify(msg));\n      });\n      this.client = client;\n      return client;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.client.connect();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.client.disconnect();\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      this.client.sendMessage(message);\n    }\n  }]);\n\n  return ChatClient;\n}();\n\nexport { ChatClient as default };","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","ChatClient","onAuthFailed","onAuthSuccess","onMessage","username","password","client","createClient","jid","transports","websocket","bosh","on","getRoster","sendPresence","msg","console","log","JSON","stringify","connect","disconnect","message","sendMessage"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;;IAEqBC,U;AACnB,sBAAYC,YAAZ,EAA0BC,aAA1B,EAAyCC,SAAzC,EAAoD;AAAA;;AAClD,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;;;WAED,sBAA+B;AAAA,UAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,UAAZC,QAAY,QAAZA,QAAY;AAC7B,UAAMC,MAAM,GAAGP,IAAI,CAACQ,YAAL,CAAkB;AAC/BC,QAAAA,GAAG,EAAEJ,QAD0B;AAE/BC,QAAAA,QAAQ,EAARA,QAF+B;AAG/BI,QAAAA,UAAU,EAAE;AACVC,UAAAA,SAAS,EAAE,2CADD;AAEVC,UAAAA,IAAI,EAAE;AAFI;AAHmB,OAAlB,CAAf;AAQAL,MAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCN,QAAAA,MAAM,CAACO,SAAP;AACAP,QAAAA,MAAM,CAACQ,YAAP;AACD,OAHD;AAIAR,MAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,KAAKX,YAA9B;AACAK,MAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,KAAKV,aAA/B,EAd6B,CAe7B;;AACAI,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,KAAKT,SAA1B;AACAG,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,UAACG,GAAD;AAAA,eACnBC,OAAO,CAACC,GAAR,CAAY,oBAAoBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAhC,CADmB;AAAA,OAArB;AAGA,WAAKT,MAAL,GAAcA,MAAd;AACA,aAAOA,MAAP;AACD;;;WAED,mBAAU;AACR,WAAKA,MAAL,CAAYc,OAAZ;AACD;;;WAED,sBAAa;AACX,WAAKd,MAAL,CAAYe,UAAZ;AACD;;;WAED,cAAKC,OAAL,EAAc;AACZ,WAAKhB,MAAL,CAAYiB,WAAZ,CAAwBD,OAAxB;AACD;;;;;;SAzCkBtB,U","sourcesContent":["import * as XMPP from \"stanza\";\r\n\r\nexport default class ChatClient {\r\n  constructor(onAuthFailed, onAuthSuccess, onMessage) {\r\n    this.onAuthFailed = onAuthFailed;\r\n    this.onAuthSuccess = onAuthSuccess;\r\n    this.onMessage = onMessage;\r\n  }\r\n\r\n  create({ username, password }) {\r\n    const client = XMPP.createClient({\r\n      jid: username,\r\n      password,\r\n      transports: {\r\n        websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n        bosh: \"false\",\r\n      },\r\n    });\r\n    client.on(\"session:started\", () => {\r\n      client.getRoster();\r\n      client.sendPresence();\r\n    });\r\n    client.on(\"auth:failed\", this.onAuthFailed);\r\n    client.on(\"auth:success\", this.onAuthSuccess);\r\n    // client.on(\"*\", console.log);\r\n    client.on(\"message\", this.onMessage);\r\n    client.on(\"message\", (msg) =>\r\n      console.log(\"Message is as: \" + JSON.stringify(msg))\r\n    );\r\n    this.client = client;\r\n    return client;\r\n  }\r\n\r\n  connect() {\r\n    this.client.connect();\r\n  }\r\n\r\n  disconnect() {\r\n    this.client.disconnect();\r\n  }\r\n\r\n  send(message) {\r\n    this.client.sendMessage(message);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}