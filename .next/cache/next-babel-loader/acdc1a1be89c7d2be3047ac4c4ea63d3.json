{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport axios from \"../../api/index\";\nimport Cookies from \"universal-cookie\";\nconst id = \"fbdcd3c94af9ffaa12f0ff4308d3b9bd\";\nconst cookies = new Cookies();\nconst cokie = cookies.get(\"credentials\");\nexport const setUser = user => ({\n  type: actionTypes.SET_USER,\n  payload: user\n});\nexport const setUSerStatus = userStatus => ({\n  type: actionTypes.SET_USER_STATUS,\n  payload: userStatus\n});\nexport const setClient = client => ({\n  type: actionTypes.SET_CLIENT,\n  payload: client\n});\nexport const setLoginError = error => ({\n  type: actionTypes.LOGIN_ERROR,\n  payload: error\n});\nexport const loginLoding = status => ({\n  type: actionTypes.LOGIN_LODING,\n  payload: status\n});\nexport const logout = status => ({\n  type: actionTypes.ON_LOGOUT,\n  payload: status\n});\nexport const toogleChatBoard = tab => ({\n  type: actionTypes.SET_ACTIVE_TAB,\n  payload: tab\n});\nexport const setChatWith = username => ({\n  type: actionTypes.SET_CHAT_WITH,\n  payload: username\n});\nexport const fetchUsers = () => {\n  try {\n    return async dispatch => {\n      const response = await axios.get(`accounts/${id}/users`, {\n        headers: {\n          \"x-auth-token\": cokie.AuthToken\n        }\n      });\n      dispatch({\n        type: actionTypes.SET_USERS,\n        payload: response.data.data\n      });\n    };\n  } catch (err) {\n    dispatch({\n      type: actionTypes.LOGIN_ERROR,\n      payload: \"error in fetching users\"\n    });\n  }\n};","map":{"version":3,"sources":["D:/chat/redux/actions/index.js"],"names":["actionTypes","axios","Cookies","id","cookies","cokie","get","setUser","user","type","SET_USER","payload","setUSerStatus","userStatus","SET_USER_STATUS","setClient","client","SET_CLIENT","setLoginError","error","LOGIN_ERROR","loginLoding","status","LOGIN_LODING","logout","ON_LOGOUT","toogleChatBoard","tab","SET_ACTIVE_TAB","setChatWith","username","SET_CHAT_WITH","fetchUsers","dispatch","response","headers","AuthToken","SET_USERS","data","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,SAA7B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,EAAE,GAAG,kCAAX;AACA,MAAMC,OAAO,GAAG,IAAIF,OAAJ,EAAhB;AACA,MAAMG,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,aAAZ,CAAd;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAET,WAAW,CAACU,QADc;AAEhCC,EAAAA,OAAO,EAAEH;AAFuB,CAAX,CAAhB;AAKP,OAAO,MAAMI,aAAa,GAAIC,UAAD,KAAiB;AAC5CJ,EAAAA,IAAI,EAAET,WAAW,CAACc,eAD0B;AAE5CH,EAAAA,OAAO,EAAEE;AAFmC,CAAjB,CAAtB;AAKP,OAAO,MAAME,SAAS,GAAIC,MAAD,KAAa;AACpCP,EAAAA,IAAI,EAAET,WAAW,CAACiB,UADkB;AAEpCN,EAAAA,OAAO,EAAEK;AAF2B,CAAb,CAAlB;AAKP,OAAO,MAAME,aAAa,GAAIC,KAAD,KAAY;AACvCV,EAAAA,IAAI,EAAET,WAAW,CAACoB,WADqB;AAEvCT,EAAAA,OAAO,EAAEQ;AAF8B,CAAZ,CAAtB;AAIP,OAAO,MAAME,WAAW,GAAIC,MAAD,KAAa;AACtCb,EAAAA,IAAI,EAAET,WAAW,CAACuB,YADoB;AAEtCZ,EAAAA,OAAO,EAAEW;AAF6B,CAAb,CAApB;AAIP,OAAO,MAAME,MAAM,GAAIF,MAAD,KAAa;AACjCb,EAAAA,IAAI,EAAET,WAAW,CAACyB,SADe;AAEjCd,EAAAA,OAAO,EAAEW;AAFwB,CAAb,CAAf;AAIP,OAAO,MAAMI,eAAe,GAAIC,GAAD,KAAU;AACvClB,EAAAA,IAAI,EAAET,WAAW,CAAC4B,cADqB;AAEvCjB,EAAAA,OAAO,EAAEgB;AAF8B,CAAV,CAAxB;AAKP,OAAO,MAAME,WAAW,GAAIC,QAAD,KAAe;AACxCrB,EAAAA,IAAI,EAAET,WAAW,CAAC+B,aADsB;AAExCpB,EAAAA,OAAO,EAAEmB;AAF+B,CAAf,CAApB;AAKP,OAAO,MAAME,UAAU,GAAG,MAAM;AAC9B,MAAI;AACF,WAAO,MAAOC,QAAP,IAAoB;AACzB,YAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACK,GAAN,CAAW,YAAWH,EAAG,QAAzB,EAAkC;AACvDgC,QAAAA,OAAO,EAAE;AACP,0BAAgB9B,KAAK,CAAC+B;AADf;AAD8C,OAAlC,CAAvB;AAKAH,MAAAA,QAAQ,CAAC;AAAExB,QAAAA,IAAI,EAAET,WAAW,CAACqC,SAApB;AAA+B1B,QAAAA,OAAO,EAAEuB,QAAQ,CAACI,IAAT,CAAcA;AAAtD,OAAD,CAAR;AACD,KAPD;AAQD,GATD,CASE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPxB,MAAAA,IAAI,EAAET,WAAW,CAACoB,WADX;AAEPT,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACF,CAhBM","sourcesContent":["import * as actionTypes from \"./types\";\r\nimport axios from \"../../api/index\";\r\nimport Cookies from \"universal-cookie\";\r\nconst id = \"fbdcd3c94af9ffaa12f0ff4308d3b9bd\";\r\nconst cookies = new Cookies();\r\nconst cokie = cookies.get(\"credentials\");\r\n\r\nexport const setUser = (user) => ({\r\n  type: actionTypes.SET_USER,\r\n  payload: user,\r\n});\r\n\r\nexport const setUSerStatus = (userStatus) => ({\r\n  type: actionTypes.SET_USER_STATUS,\r\n  payload: userStatus,\r\n});\r\n\r\nexport const setClient = (client) => ({\r\n  type: actionTypes.SET_CLIENT,\r\n  payload: client,\r\n});\r\n\r\nexport const setLoginError = (error) => ({\r\n  type: actionTypes.LOGIN_ERROR,\r\n  payload: error,\r\n});\r\nexport const loginLoding = (status) => ({\r\n  type: actionTypes.LOGIN_LODING,\r\n  payload: status,\r\n});\r\nexport const logout = (status) => ({\r\n  type: actionTypes.ON_LOGOUT,\r\n  payload: status,\r\n});\r\nexport const toogleChatBoard = (tab) => ({\r\n  type: actionTypes.SET_ACTIVE_TAB,\r\n  payload: tab,\r\n});\r\n\r\nexport const setChatWith = (username) => ({\r\n  type: actionTypes.SET_CHAT_WITH,\r\n  payload: username,\r\n});\r\n\r\nexport const fetchUsers = () => {\r\n  try {\r\n    return async (dispatch) => {\r\n      const response = await axios.get(`accounts/${id}/users`, {\r\n        headers: {\r\n          \"x-auth-token\": cokie.AuthToken,\r\n        },\r\n      });\r\n      dispatch({ type: actionTypes.SET_USERS, payload: response.data.data });\r\n    };\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.LOGIN_ERROR,\r\n      payload: \"error in fetching users\",\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}