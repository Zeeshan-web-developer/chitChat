{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as XMPP from \"stanza\";\nimport dateTime from \"../containers/leftSidebar/datetime\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus, setLoginError, setNewMessage } from \"../redux/actions/index\";\nvar client;\nexport default function chatClient(username, password) {\n  console.log(\"connection request\");\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n  }); //pinging the server\n\n  setInterval(function () {\n    var ifConnected = window.navigator.onLine;\n    var reconnect;\n\n    if (ifConnected) {\n      client.ping(username).then(function (message) {\n        console.log(\"Messaage ping\");\n      })[\"catch\"](function (error) {\n        var user = localStorage.getItem(\"username\");\n        var pass = localStorage.getItem(\"password\");\n        console.log(\"ping error\", error);\n        reconnect = chatClient(user, pass);\n        console.log(\"connect\", user, pass); //reconnect.disconnect();\n\n        setTimeout(function () {\n          console.log(\"after error connect to the server after 60 secnods\");\n          reconnect.connect();\n        }, 60000);\n      });\n    } else {\n      console.log(\"Connection not available\");\n      reconnect.disconnect();\n    }\n  }, 60000);\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\n  });\n  client.on(\"subscribe\", function (ReceivedPresence) {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, function () {\n      return console.log(\"subscrption request sent back to\" + ReceivedPresence.from);\n    });\n  });\n  client.on(\"presence\", function (presence) {\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\n      //here we need to update user status that user is offline\n      console.log(\"i am unavailable\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"offline\"\n      }));\n    } else if (!presence.hasOwnProperty(\"type\")) {\n      //here we need to update user status that user is online\n      console.log(\"i am available\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"online\"\n      }));\n    }\n  });\n  client.on(\"unavailable\", function (presence) {// console.log(presence.from + \" is offline\");\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n  //here we listen incoming messages\n\n  client.on(\"message\", function (newMessage) {\n    newMessage[\"messageTime\"] = dateTime();\n    newMessage[\"direction\"] = \"received\";\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\n    store.dispatch(setNewMessage(newMessage));\n  });\n  return client;\n}\nvar roster;\n\nvar getContacts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context.sent;\n            roster = contacts.items;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getRosterItems = function getRosterItems() {\n  return roster;\n};\nexport var sendNewMessage = function sendNewMessage(newMessage) {\n  client && client.sendMessage(newMessage);\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","dateTime","store","updateUserStatus","setLoginError","setNewMessage","client","chatClient","username","password","console","log","createClient","jid","transports","websocket","bosh","rosterVer","on","getContacts","sendPresence","setInterval","ifConnected","window","navigator","onLine","reconnect","ping","then","message","error","user","localStorage","getItem","pass","setTimeout","connect","disconnect","dispatch","ReceivedPresence","acceptSubscription","from","subscribe","presence","hasOwnProperty","type","id","split","onlineStatus","newMessage","roster","getRoster","contacts","items","getRosterItems","sendNewMessage","sendMessage"],"mappings":"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","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport dateTime from \"../containers/leftSidebar/datetime\";\r\nimport store from \"../redux/store/store\";\r\nimport {\r\n  updateUserStatus,\r\n  setLoginError,\r\n  setNewMessage,\r\n} from \"../redux/actions/index\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  console.log(\"connection request\");\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  //pinging the server\r\n  setInterval(() => {\r\n    var ifConnected = window.navigator.onLine;\r\n    let reconnect;\r\n    if (ifConnected) {\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"Messaage ping\");\r\n        })\r\n        .catch((error) => {\r\n          const user = localStorage.getItem(\"username\");\r\n          const pass = localStorage.getItem(\"password\");\r\n          console.log(\"ping error\", error);\r\n          reconnect = chatClient(user, pass);\r\n          console.log(\"connect\", user, pass);\r\n          //reconnect.disconnect();\r\n          setTimeout(() => {\r\n            console.log(\"after error connect to the server after 60 secnods\");\r\n            reconnect.connect();\r\n          }, 60000);\r\n        });\r\n    } else {\r\n      console.log(\"Connection not available\");\r\n      reconnect.disconnect();\r\n    }\r\n  }, 60000);\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n\r\n  client.on(\"presence\", (presence) => {\r\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\r\n      //here we need to update user status that user is offline\r\n      console.log(\"i am unavailable\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"offline\",\r\n        })\r\n      );\r\n    } else if (!presence.hasOwnProperty(\"type\")) {\r\n      //here we need to update user status that user is online\r\n      console.log(\"i am available\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"online\",\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  client.on(\"unavailable\", (presence) => {\r\n    // console.log(presence.from + \" is offline\");\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n\r\n  //here we listen incoming messages\r\n  client.on(\"message\", (newMessage) => {\r\n    newMessage[\"messageTime\"] = dateTime();\r\n    newMessage[\"direction\"] = \"received\";\r\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\r\n    store.dispatch(setNewMessage(newMessage));\r\n  });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n\r\nexport const sendNewMessage = (newMessage) => {\r\n  client && client.sendMessage(newMessage);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}