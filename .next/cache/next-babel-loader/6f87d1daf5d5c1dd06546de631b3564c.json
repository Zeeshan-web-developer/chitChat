{"ast":null,"code":"function timeZone() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  var offset = date.getTimezoneOffset();\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  var minutesOut = minutes > 0 ? \":\" + (\"0\" + minutes).slice(-2) : \"\";\n  return (offset < 0 ? \"+\" : \"-\") + hours + minutesOut;\n}\n\nexport default function dateTime() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$date = options.date,\n      date = _options$date === void 0 ? new Date() : _options$date,\n      _options$local = options.local,\n      local = _options$local === void 0 ? true : _options$local,\n      _options$showTimeZone = options.showTimeZone,\n      showTimeZone = _options$showTimeZone === void 0 ? false : _options$showTimeZone,\n      _options$showMillisec = options.showMilliseconds,\n      showMilliseconds = _options$showMillisec === void 0 ? false : _options$showMillisec;\n\n  if (local) {\n    // Offset the date so it will return the correct value when getting the ISO string.\n    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n  }\n\n  var end = \"\";\n\n  if (showTimeZone) {\n    end = \" UTC\" + (local ? timeZone(date) : \"\");\n  }\n\n  if (showMilliseconds && date.getUTCMilliseconds() > 0) {\n    end = \" \".concat(date.getUTCMilliseconds(), \"ms\").concat(end);\n  }\n\n  return date.toISOString().replace(/T/, \" \").replace(/\\..+/, end);\n}","map":{"version":3,"sources":["D:/chat/containers/leftSidebar/datetime.js"],"names":["timeZone","date","Date","offset","getTimezoneOffset","absOffset","Math","abs","hours","floor","minutes","minutesOut","slice","dateTime","options","local","showTimeZone","showMilliseconds","getTime","end","getUTCMilliseconds","toISOString","replace"],"mappings":"AAAA,SAASA,QAAT,GAAqC;AAAA,MAAnBC,IAAmB,uEAAZ,IAAIC,IAAJ,EAAY;AACnC,MAAMC,MAAM,GAAGF,IAAI,CAACG,iBAAL,EAAf;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,CAAlB;AACA,MAAMK,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAWJ,SAAS,GAAG,EAAvB,CAAd;AACA,MAAMK,OAAO,GAAGL,SAAS,GAAG,EAA5B;AACA,MAAMM,UAAU,GAAGD,OAAO,GAAG,CAAV,GAAc,MAAM,CAAC,MAAMA,OAAP,EAAgBE,KAAhB,CAAsB,CAAC,CAAvB,CAApB,GAAgD,EAAnE;AACA,SAAO,CAACT,MAAM,GAAG,CAAT,GAAa,GAAb,GAAmB,GAApB,IAA2BK,KAA3B,GAAmCG,UAA1C;AACD;;AAED,eAAe,SAASE,QAAT,GAAgC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC7C,sBAKIA,OALJ,CACEb,IADF;AAAA,MACEA,IADF,8BACS,IAAIC,IAAJ,EADT;AAAA,uBAKIY,OALJ,CAEEC,KAFF;AAAA,MAEEA,KAFF,+BAEU,IAFV;AAAA,8BAKID,OALJ,CAGEE,YAHF;AAAA,MAGEA,YAHF,sCAGiB,KAHjB;AAAA,8BAKIF,OALJ,CAIEG,gBAJF;AAAA,MAIEA,gBAJF,sCAIqB,KAJrB;;AAOA,MAAIF,KAAJ,EAAW;AACT;AACAd,IAAAA,IAAI,GAAG,IAAIC,IAAJ,CAASD,IAAI,CAACiB,OAAL,KAAiBjB,IAAI,CAACG,iBAAL,KAA2B,KAArD,CAAP;AACD;;AAED,MAAIe,GAAG,GAAG,EAAV;;AAEA,MAAIH,YAAJ,EAAkB;AAChBG,IAAAA,GAAG,GAAG,UAAUJ,KAAK,GAAGf,QAAQ,CAACC,IAAD,CAAX,GAAoB,EAAnC,CAAN;AACD;;AAED,MAAIgB,gBAAgB,IAAIhB,IAAI,CAACmB,kBAAL,KAA4B,CAApD,EAAuD;AACrDD,IAAAA,GAAG,cAAOlB,IAAI,CAACmB,kBAAL,EAAP,eAAqCD,GAArC,CAAH;AACD;;AAED,SAAOlB,IAAI,CAACoB,WAAL,GAAmBC,OAAnB,CAA2B,GAA3B,EAAgC,GAAhC,EAAqCA,OAArC,CAA6C,MAA7C,EAAqDH,GAArD,CAAP;AACD","sourcesContent":["function timeZone(date = new Date()) {\r\n  const offset = date.getTimezoneOffset();\r\n  const absOffset = Math.abs(offset);\r\n  const hours = Math.floor(absOffset / 60);\r\n  const minutes = absOffset % 60;\r\n  const minutesOut = minutes > 0 ? \":\" + (\"0\" + minutes).slice(-2) : \"\";\r\n  return (offset < 0 ? \"+\" : \"-\") + hours + minutesOut;\r\n}\r\n\r\nexport default function dateTime(options = {}) {\r\n  let {\r\n    date = new Date(),\r\n    local = true,\r\n    showTimeZone = false,\r\n    showMilliseconds = false,\r\n  } = options;\r\n\r\n  if (local) {\r\n    // Offset the date so it will return the correct value when getting the ISO string.\r\n    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\r\n  }\r\n\r\n  let end = \"\";\r\n\r\n  if (showTimeZone) {\r\n    end = \" UTC\" + (local ? timeZone(date) : \"\");\r\n  }\r\n\r\n  if (showMilliseconds && date.getUTCMilliseconds() > 0) {\r\n    end = ` ${date.getUTCMilliseconds()}ms${end}`;\r\n  }\r\n\r\n  return date.toISOString().replace(/T/, \" \").replace(/\\..+/, end);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}