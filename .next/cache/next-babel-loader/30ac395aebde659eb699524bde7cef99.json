{"ast":null,"code":"import * as XMPP from \"stanza\";\nlet client;\n\nasync function addContact() {\n  var stnza = {\n    id: \"roster_2\",\n    to: \"dar@mongoose.mysmartpbx.org\",\n    type: \"set\",\n    query: {\n      xmlns: \"jabber:iq:roster\"\n    },\n    item: {\n      jid: client.config.jid,\n      approved: \"1\",\n      subscription: \"none\"\n    }\n  };\n  const s = await client.sendIQ(stnza, {\n    type: \"set\"\n  });\n  console.log(\"sendiq\", s);\n}\n\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", () => {\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\n    getContacts();\n    client.sendPresence();\n    addContact();\n  });\n  client.on(\"auth:failed\", () => {\n    console.log(\"xmpp authentication failed\");\n  });\n  return client;\n}\nexport const getContacts = async () => {\n  const contacts = await client.getRoster();\n  console.log(\"all contacts \", contacts.items);\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","client","addContact","stnza","id","to","type","query","xmlns","item","jid","config","approved","subscription","s","sendIQ","console","log","chatClient","username","password","createClient","transports","websocket","bosh","rosterVer","on","subscribe","getContacts","sendPresence","contacts","getRoster","items"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,IAAIC,MAAJ;;AAEA,eAAeC,UAAf,GAA4B;AAC1B,MAAIC,KAAK,GAAG;AACVC,IAAAA,EAAE,EAAE,UADM;AAEVC,IAAAA,EAAE,EAAE,6BAFM;AAGVC,IAAAA,IAAI,EAAE,KAHI;AAIVC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KAJG;AAOVC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAET,MAAM,CAACU,MAAP,CAAcD,GADf;AAEJE,MAAAA,QAAQ,EAAE,GAFN;AAGJC,MAAAA,YAAY,EAAE;AAHV;AAPI,GAAZ;AAaA,QAAMC,CAAC,GAAG,MAAMb,MAAM,CAACc,MAAP,CAAcZ,KAAd,EAAqB;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAArB,CAAhB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,CAAtB;AACD;;AACD,eAAe,SAASI,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACrDnB,EAAAA,MAAM,GAAGD,IAAI,CAACqB,YAAL,CAAkB;AACzBX,IAAAA,GAAG,EAAES,QADoB;AAEzBC,IAAAA,QAFyB;AAGzBE,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAHa;AAOzBC,IAAAA,SAAS,EAAE;AAPc,GAAlB,CAAT,CADqD,CAUrD;;AACAxB,EAAAA,MAAM,CAACyB,EAAP,CAAU,iBAAV,EAA6B,MAAM;AACjCzB,IAAAA,MAAM,CAAC0B,SAAP,CAAiB,iCAAjB;AACAC,IAAAA,WAAW;AACX3B,IAAAA,MAAM,CAAC4B,YAAP;AACA3B,IAAAA,UAAU;AACX,GALD;AAOAD,EAAAA,MAAM,CAACyB,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BV,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAFD;AAGA,SAAOhB,MAAP;AACD;AAED,OAAO,MAAM2B,WAAW,GAAG,YAAY;AACrC,QAAME,QAAQ,GAAG,MAAM7B,MAAM,CAAC8B,SAAP,EAAvB;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,QAAQ,CAACE,KAAtC;AACD,CAHM","sourcesContent":["import * as XMPP from \"stanza\";\r\nlet client;\r\n\r\nasync function addContact() {\r\n  var stnza = {\r\n    id: \"roster_2\",\r\n    to: \"dar@mongoose.mysmartpbx.org\",\r\n    type: \"set\",\r\n    query: {\r\n      xmlns: \"jabber:iq:roster\",\r\n    },\r\n    item: {\r\n      jid: client.config.jid,\r\n      approved: \"1\",\r\n      subscription: \"none\",\r\n    },\r\n  };\r\n  const s = await client.sendIQ(stnza, { type: \"set\" });\r\n  console.log(\"sendiq\", s);\r\n}\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\r\n    getContacts();\r\n    client.sendPresence();\r\n    addContact();\r\n  });\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n  return client;\r\n}\r\n\r\nexport const getContacts = async () => {\r\n  const contacts = await client.getRoster();\r\n  console.log(\"all contacts \", contacts.items);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}