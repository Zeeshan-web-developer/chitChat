{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"D:\\\\chat\\\\helpers\\\\chatContext\\\\chatCtx.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Context from \"./index\";\nimport { fetchChatMemberApi, fetchChatApi } from \"../../api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ChatProvider = function ChatProvider(props) {\n  _s();\n\n  var _useState = useState([]),\n      chatMembers = _useState[0],\n      setChatMembers = _useState[1];\n\n  var _useState2 = useState([]),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var currentUserId = 0;\n\n  var _useState3 = useState({\n    id: 0,\n    name: \"Jony Lynetin\",\n    thumb: \"contact/2.jpg\",\n    status: \"8\",\n    mesg: \"Typing................\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    typing: true\n  }),\n      selectedUser = _useState3[0],\n      setSelectedUser = _useState3[1];\n\n  var _useState4 = useState(false),\n      isTyeping = _useState4[0],\n      setIsTypeing = _useState4[1];\n\n  useEffect(function () {\n    // get all initial chat users\n    fetchChatMemberApi().then(function (res) {\n      setChatMembers(res.data);\n\n      if (res) {\n        fetchChatApi().then(function (chatres) {\n          var selectedUserId = chatres.data[0].users.find(function (x) {\n            return x !== currentUserId;\n          });\n          var IsselectedUser = res.data.find(function (x) {\n            return x.id === selectedUserId;\n          });\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    }); // get initial chat between two chat users\n\n    fetchChatApi().then(function (res) {\n      setChats(res.data);\n\n      if (res) {\n        fetchChatMemberApi().then(function (memberres) {\n          var selectedUserId = res.data[0].users.find(function (x) {\n            return x !== currentUserId;\n          });\n          var IsselectedUser = memberres.data.find(function (x) {\n            return x.id === selectedUserId;\n          });\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []); // chat with user first time\n\n  var createChat = function createChat(currentUserId, selectedUserId, chats, onlineStatus) {\n    var conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus\n    };\n    chats.splice(0, 0, conversation); //we are adding conversion at 0th index\n\n    var selectedUser = chatMembers.find(function (x) {\n      return x.id === selectedUserId;\n    });\n    setChats(_toConsumableArray(chats));\n    setSelectedUser(selectedUser);\n  }; // change existing chat between two chat users\n\n\n  var changeChat = function changeChat(userId) {\n    var selectedUser = chatMembers.find(function (x) {\n      return x.id === userId;\n    });\n    setSelectedUser(selectedUser);\n  }; // send message to selected chat users\n\n\n  var sendMessage = function sendMessage(currentUserId, selectedUserId, messageInput, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser);\n    }\n  }; // reply message to selected chat users\n\n\n  var replyMessage = function replyMessage(currentUserId, selectedUserId, _replyMessage, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: _replyMessage,\n        read: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser2 = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      _selectedUser2.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser2);\n    }\n  }; // send stickers or images\n\n\n  var sendImages = function sendImages(currentUserId, selectedUserId, image, chats) {\n    var chat = chats.find(function (x) {\n      return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n    }); // find selected chat User Id\n\n    var now = new Date();\n    var time = now.getHours() + \":\" + now.getMinutes();\n\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      var chats_data = chats.filter(function (x) {\n        return x.id !== chat.id;\n      });\n      chats_data.splice(0, 0, chat);\n\n      var _selectedUser3 = chatMembers.find(function (x) {\n        return x.id === selectedUserId;\n      });\n\n      setChats(_toConsumableArray(chats)); // update chats messages\n\n      setSelectedUser(_selectedUser3);\n    }\n  }; // when chat user replied to our message existing tyeping loader\n\n\n  var typingMessage = function typingMessage(typeing) {\n    setIsTypeing(typeing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      chatMembers: chatMembers,\n      chats: chats,\n      currentUser: chatMembers[0],\n      selectedUser: selectedUser,\n      isTyeping: isTyeping,\n      changeChat: changeChat,\n      createChat: createChat,\n      sendMessage: sendMessage,\n      replyMessage: replyMessage,\n      sendImages: sendImages,\n      typingMessage: typingMessage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChatProvider, \"2AN6UwGxS8dV9usZF76NcaHofJM=\");\n\n_c = ChatProvider;\nexport default ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["D:/chat/helpers/chatContext/chatCtx.js"],"names":["React","useState","useEffect","Context","fetchChatMemberApi","fetchChatApi","ChatProvider","props","chatMembers","setChatMembers","chats","setChats","currentUserId","id","name","thumb","status","mesg","lastSeenDate","onlineStatus","typing","selectedUser","setSelectedUser","isTyeping","setIsTypeing","then","res","data","chatres","selectedUserId","users","find","x","IsselectedUser","memberres","createChat","conversation","length","lastMessageTime","messages","stickers","splice","changeChat","userId","sendMessage","messageInput","chat","includes","now","Date","time","getHours","getMinutes","push","sender","text","chats_data","filter","replyMessage","read","online","sendImages","image","typingMessage","typeing","currentUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Context from \"./index\";\nimport { fetchChatMemberApi, fetchChatApi } from \"../../api/index\";\n\nconst ChatProvider = (props) => {\n  const [chatMembers, setChatMembers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const currentUserId = 0;\n  const [selectedUser, setSelectedUser] = useState({\n    id: 0,\n    name: \"Jony Lynetin\",\n    thumb: \"contact/2.jpg\",\n    status: \"8\",\n    mesg: \"Typing................\",\n    lastSeenDate: \"30/11/19\",\n    onlineStatus: \"online\",\n    typing: true,\n  });\n  const [isTyeping, setIsTypeing] = useState(false);\n\n  useEffect(() => {\n    // get all initial chat users\n\n    fetchChatMemberApi().then((res) => {\n      setChatMembers(res.data);\n      if (res) {\n        fetchChatApi().then((chatres) => {\n          const selectedUserId = chatres.data[0].users.find(\n            (x) => x !== currentUserId\n          );\n          const IsselectedUser = res.data.find((x) => x.id === selectedUserId);\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n    // get initial chat between two chat users\n    fetchChatApi().then((res) => {\n      setChats(res.data);\n      if (res) {\n        fetchChatMemberApi().then((memberres) => {\n          const selectedUserId = res.data[0].users.find(\n            (x) => x !== currentUserId\n          );\n          const IsselectedUser = memberres.data.find(\n            (x) => x.id === selectedUserId\n          );\n          setSelectedUser(IsselectedUser);\n        });\n      }\n    });\n  }, []);\n\n  // chat with user first time\n  const createChat = (currentUserId, selectedUserId, chats, onlineStatus) => {\n    let conversation = {\n      id: chats.length + 1,\n      users: [currentUserId, selectedUserId],\n      lastMessageTime: \"-\",\n      messages: [],\n      stickers: [],\n      onlineStatus: onlineStatus,\n    };\n\n    chats.splice(0, 0, conversation); //we are adding conversion at 0th index\n    const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n    setChats([...chats]);\n    setSelectedUser(selectedUser);\n  };\n\n  // change existing chat between two chat users\n  const changeChat = (userId) => {\n    const selectedUser = chatMembers.find((x) => x.id === userId);\n    setSelectedUser(selectedUser);\n  };\n\n  // send message to selected chat users\n  const sendMessage = (currentUserId, selectedUserId, messageInput, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.messages.push({\n        sender: currentUserId,\n        time: time,\n        text: messageInput,\n        status: true,\n      });\n      chat.lastMessageTime = time;\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // reply message to selected chat users\n  const replyMessage = (currentUserId, selectedUserId, replyMessage, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.messages.push({\n        sender: selectedUserId,\n        time: time,\n        text: replyMessage,\n        read: true,\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      selectedUser.onlineStatus = \"online\"; // chat user reply the message then set selected chat user  status to \"online\"\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // send stickers or images\n  const sendImages = (currentUserId, selectedUserId, image, chats) => {\n    let chat = chats.find(\n      (x) => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\n    ); // find selected chat User Id\n    const now = new Date();\n    const time = now.getHours() + \":\" + now.getMinutes();\n    if (chat) {\n      chat.stickers.push({\n        sender: currentUserId,\n        time: time,\n        stickers: image,\n        status: true,\n      });\n      chat.lastMessageTime = time;\n      chat.online = \"\";\n      let chats_data = chats.filter((x) => x.id !== chat.id);\n      chats_data.splice(0, 0, chat);\n      const selectedUser = chatMembers.find((x) => x.id === selectedUserId);\n      setChats([...chats]); // update chats messages\n      setSelectedUser(selectedUser);\n    }\n  };\n\n  // when chat user replied to our message existing tyeping loader\n  const typingMessage = (typeing) => {\n    setIsTypeing(typeing);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        chatMembers: chatMembers,\n        chats: chats,\n        currentUser: chatMembers[0],\n        selectedUser: selectedUser,\n        isTyeping: isTyeping,\n        changeChat: changeChat,\n        createChat: createChat,\n        sendMessage: sendMessage,\n        replyMessage: replyMessage,\n        sendImages: sendImages,\n        typingMessage: typingMessage,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default ChatProvider;\n"]},"metadata":{},"sourceType":"module"}