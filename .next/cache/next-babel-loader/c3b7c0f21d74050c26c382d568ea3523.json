{"ast":null,"code":"import * as XMPP from \"stanza\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus } from \"../redux/actions/index\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst cokie = cookies.get(\"credentials\");\nlet client;\nconst user = cokie.username;\nconst pass = cokie.password;\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", () => {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n  }); //pinging the server\n\n  setInterval(() => {\n    var ifConnected = window.navigator.onLine;\n\n    if (ifConnected) {\n      console.log(\"Connection available\");\n      client.ping(username).then(message => {\n        console.log(\"ping send\", message);\n      }).catch(error => {\n        console.log(\"ping error\", error);\n        let reconnect = chatClient(user, pass);\n        reconnect.connect();\n        console.log(\"connect\", client.username, client.password);\n      });\n    } else {\n      console.log(\"Connection not available\");\n    }\n  }, 5000);\n  client.on(\"auth:failed\", () => {\n    console.log(\"xmpp authentication failed\");\n  });\n  client.on(\"subscribe\", ReceivedPresence => {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, () => console.log(\"subscrption request sent back to\" + ReceivedPresence.from));\n  });\n  client.on(\"presence\", presence => {\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\n      //here we need to update user status that user is offline\n      console.log(\"i am unavailable\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"offline\"\n      }));\n    } else if (!presence.hasOwnProperty(\"type\")) {\n      //here we need to update user status that user is online\n      console.log(\"i am available\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"online\"\n      }));\n    }\n  });\n  client.on(\"unavailable\", presence => {// console.log(presence.from + \" is offline\");\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n\n  return client;\n}\nlet roster;\n\nconst getContacts = async () => {\n  let contacts = await client.getRoster();\n  roster = contacts.items;\n};\n\nexport const getRosterItems = () => {\n  return roster;\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","store","updateUserStatus","Cookies","cookies","cokie","get","client","user","username","pass","password","chatClient","createClient","jid","transports","websocket","bosh","rosterVer","on","console","log","getContacts","sendPresence","setInterval","ifConnected","window","navigator","onLine","ping","then","message","catch","error","reconnect","connect","ReceivedPresence","acceptSubscription","from","subscribe","presence","hasOwnProperty","type","dispatch","id","split","onlineStatus","roster","contacts","getRoster","items","getRosterItems"],"mappings":"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","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport store from \"../redux/store/store\";\r\nimport { updateUserStatus } from \"../redux/actions/index\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\nconst cokie = cookies.get(\"credentials\");\r\nlet client;\r\nconst user = cokie.username;\r\nconst pass = cokie.password;\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  //pinging the server\r\n  setInterval(() => {\r\n    var ifConnected = window.navigator.onLine;\r\n    if (ifConnected) {\r\n      console.log(\"Connection available\");\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"ping send\", message);\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"ping error\", error);\r\n          let reconnect = chatClient(user, pass);\r\n          reconnect.connect();\r\n          console.log(\"connect\", client.username, client.password);\r\n        });\r\n    } else {\r\n      console.log(\"Connection not available\");\r\n    }\r\n  }, 5000);\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n\r\n  client.on(\"presence\", (presence) => {\r\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\r\n      //here we need to update user status that user is offline\r\n      console.log(\"i am unavailable\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"offline\",\r\n        })\r\n      );\r\n    } else if (!presence.hasOwnProperty(\"type\")) {\r\n      //here we need to update user status that user is online\r\n      console.log(\"i am available\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"online\",\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  client.on(\"unavailable\", (presence) => {\r\n    // console.log(presence.from + \" is offline\");\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}