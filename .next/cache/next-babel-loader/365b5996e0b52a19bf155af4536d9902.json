{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as XMPP from \"stanza\";\nimport dateTime from \"../containers/leftSidebar/datetime\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus, setLoginError, setNewMessage, setLastMessage, removeRecentUser, addNewUSer } from \"../redux/actions/index\";\nvar client;\nexport default function chatClient(username, password) {\n  console.log(\"connection request\");\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\",\n    timeout: 60\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n  }); //pinging the server\n\n  setInterval(function () {\n    var ifConnected = window.navigator.onLine;\n    var reconnect;\n    var user = localStorage.getItem(\"username\");\n    var pass = localStorage.getItem(\"password\");\n\n    if (ifConnected) {\n      client.ping(username).then(function (message) {\n        console.log(\"Messaage ping\");\n      })[\"catch\"](function (error) {\n        console.log(\"ping error\", error);\n        reconnect = chatClient(user, pass);\n        console.log(\"connect\", user, pass); //reconnect.disconnect();\n\n        reconnect.connect();\n        setTimeout(function () {\n          console.log(\"after error connect to the server after 60 secnods\");\n          reconnect.connect();\n        }, 60000);\n      });\n    } else {\n      console.log(\"Connection not available\");\n      client.disconnect();\n    }\n  }, 5000);\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\n  });\n  client.on(\"subscribe\", function (ReceivedPresence) {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, function () {\n      return console.log(\"subscrption request sent back to\" + ReceivedPresence.from);\n    });\n  });\n  client.on(\"presence\", function (presence) {\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\n      //here we need to update user status that user is offline\n      console.log(\"i am unavailable\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"offline\"\n      }));\n    } else if (!presence.hasOwnProperty(\"type\")) {\n      //here we need to update user status that user is online\n      console.log(\"i am available\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"online\"\n      }));\n    }\n  });\n  client.on(\"unavailable\", function (presence) {// console.log(presence.from + \" is offline\");\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n  //here we listen incoming messages\n\n  client.on(\"message\", function (newMessage) {\n    var found = false;\n    var foundID;\n    var recentUsers = store.getState().user.chatedUsers;\n    var usersP = store.getState().user.allusers;\n    var filteredUsers = usersP.length > 0 && usersP[0].filter(function (user) {\n      return user.id !== newMessage.to;\n    });\n    newMessage[\"messageTime\"] = dateTime();\n    newMessage[\"direction\"] = \"received\";\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\n    newMessage[\"fromto\"] = newMessage.from;\n\n    for (var i = 0; i < recentUsers.length; i++) {\n      if (recentUsers[i].id === newMessage.from) {\n        found = true;\n        foundID = recentUsers[i].id;\n        break;\n      }\n    }\n\n    var name = filteredUsers && filteredUsers.find(function (item) {\n      return item.id === newMessage.from;\n    });\n    var recivedName = name.first_name;\n    console.log(\"recived name\" + recivedName);\n\n    if (!found) {\n      recentUsers.map(function (ci) {\n        if (!ci.hasOwnProperty(\"mesg\")) {\n          store.dispatch(removeRecentUser(ci.id));\n        }\n      });\n      store.dispatch(addNewUSer(_defineProperty({\n        id: newMessage.from,\n        first_name: recivedName,\n        status: \"online\",\n        onlineStatus: \"online\"\n      }, \"status\", \"online\")));\n    }\n\n    console.log(\"user found on message received: \" + found);\n    store.dispatch(setNewMessage(newMessage));\n    store.dispatch(setLastMessage({\n      id: newMessage.from,\n      message: newMessage.body,\n      time: dateTime()\n    }));\n  });\n  return client;\n}\nvar roster;\n\nvar getContacts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context.sent;\n            roster = contacts.items;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getRosterItems = function getRosterItems() {\n  return roster;\n};\nexport var sendNewMessage = function sendNewMessage(newMessage) {\n  client && client.sendMessage(newMessage);\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","dateTime","store","updateUserStatus","setLoginError","setNewMessage","setLastMessage","removeRecentUser","addNewUSer","client","chatClient","username","password","console","log","createClient","jid","transports","websocket","bosh","rosterVer","timeout","on","getContacts","sendPresence","setInterval","ifConnected","window","navigator","onLine","reconnect","user","localStorage","getItem","pass","ping","then","message","error","connect","setTimeout","disconnect","dispatch","ReceivedPresence","acceptSubscription","from","subscribe","presence","hasOwnProperty","type","id","split","onlineStatus","newMessage","found","foundID","recentUsers","getState","chatedUsers","usersP","allusers","filteredUsers","length","filter","to","i","name","find","item","recivedName","first_name","map","ci","status","body","time","roster","getRoster","contacts","items","getRosterItems","sendNewMessage","sendMessage"],"mappings":"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","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport dateTime from \"../containers/leftSidebar/datetime\";\r\nimport store from \"../redux/store/store\";\r\nimport {\r\n  updateUserStatus,\r\n  setLoginError,\r\n  setNewMessage,\r\n  setLastMessage,\r\n  removeRecentUser,\r\n  addNewUSer,\r\n} from \"../redux/actions/index\";\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  console.log(\"connection request\");\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n    timeout: 60,\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  //pinging the server\r\n  setInterval(() => {\r\n    var ifConnected = window.navigator.onLine;\r\n    let reconnect;\r\n    const user = localStorage.getItem(\"username\");\r\n    const pass = localStorage.getItem(\"password\");\r\n    if (ifConnected) {\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"Messaage ping\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"ping error\", error);\r\n          reconnect = chatClient(user, pass);\r\n          console.log(\"connect\", user, pass);\r\n          //reconnect.disconnect();\r\n          reconnect.connect();\r\n          setTimeout(() => {\r\n            console.log(\"after error connect to the server after 60 secnods\");\r\n            reconnect.connect();\r\n          }, 60000);\r\n        });\r\n    } else {\r\n      console.log(\"Connection not available\");\r\n      client.disconnect();\r\n    }\r\n  }, 5000);\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n    store.dispatch(setLoginError(\"INCORRECT USERNAME OR PASSWORD\"));\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n\r\n  client.on(\"presence\", (presence) => {\r\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\r\n      //here we need to update user status that user is offline\r\n      console.log(\"i am unavailable\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"offline\",\r\n        })\r\n      );\r\n    } else if (!presence.hasOwnProperty(\"type\")) {\r\n      //here we need to update user status that user is online\r\n      console.log(\"i am available\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"online\",\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  client.on(\"unavailable\", (presence) => {\r\n    // console.log(presence.from + \" is offline\");\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n\r\n  //here we listen incoming messages\r\n  client.on(\"message\", (newMessage) => {\r\n    let found = false;\r\n    let foundID;\r\n    const recentUsers = store.getState().user.chatedUsers;\r\n    const usersP = store.getState().user.allusers;\r\n    let filteredUsers =\r\n      usersP.length > 0 &&\r\n      usersP[0].filter((user) => user.id !== newMessage.to);\r\n\r\n    newMessage[\"messageTime\"] = dateTime();\r\n    newMessage[\"direction\"] = \"received\";\r\n    newMessage[\"from\"] = newMessage.from.split(\"/\")[0];\r\n    newMessage[\"fromto\"] = newMessage.from;\r\n\r\n    for (var i = 0; i < recentUsers.length; i++) {\r\n      if (recentUsers[i].id === newMessage.from) {\r\n        found = true;\r\n        foundID = recentUsers[i].id;\r\n        break;\r\n      }\r\n    }\r\n    var name =\r\n      filteredUsers &&\r\n      filteredUsers.find((item) => item.id === newMessage.from);\r\n    let recivedName = name.first_name;\r\n    console.log(\"recived name\" + recivedName);\r\n    if (!found) {\r\n      recentUsers.map((ci) => {\r\n        if (!ci.hasOwnProperty(\"mesg\")) {\r\n          store.dispatch(removeRecentUser(ci.id));\r\n        }\r\n      });\r\n\r\n      store.dispatch(\r\n        addNewUSer({\r\n          id: newMessage.from,\r\n          first_name: recivedName,\r\n          status: \"online\",\r\n          onlineStatus: \"online\",\r\n          status: \"online\",\r\n        })\r\n      );\r\n    }\r\n    console.log(\"user found on message received: \" + found);\r\n    store.dispatch(setNewMessage(newMessage));\r\n    store.dispatch(\r\n      setLastMessage({\r\n        id: newMessage.from,\r\n        message: newMessage.body,\r\n        time: dateTime(),\r\n      })\r\n    );\r\n  });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n\r\nexport const sendNewMessage = (newMessage) => {\r\n  client && client.sendMessage(newMessage);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}