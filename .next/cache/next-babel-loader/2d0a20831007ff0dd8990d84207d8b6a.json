{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as XMPP from \"stanza\";\nimport store from \"../redux/store/store\";\nimport { updateUserStatus } from \"../redux/actions/index\";\nimport Cookies from \"universal-cookie\";\nvar cookies = new Cookies();\nvar cokie = cookies.get(\"credentials\");\nvar client;\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    },\n    rosterVer: \"ver14\"\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    console.log(\"session started\");\n    getContacts();\n    client.sendPresence();\n  }); //pinging the server\n\n  setInterval(function () {\n    var ifConnected = window.navigator.onLine;\n\n    if (ifConnected) {\n      console.log(\"Connection available\");\n      client.ping(username).then(function (message) {\n        console.log(\"ping send\", message);\n      })[\"catch\"](function (error) {\n        var user = localStorage.getItem(\"username\");\n        var pass = localStorage.getItem(\"password\");\n        console.log(\"ping error\", error);\n        var reconnect = chatClient(user, pass);\n        reconnect.connect();\n        console.log(\"connect\", reconnect.user, user);\n      });\n    } else {\n      console.log(\"Connection not available\");\n    }\n  }, 5000);\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n  });\n  client.on(\"subscribe\", function (ReceivedPresence) {\n    console.log(\"received request from\", ReceivedPresence);\n    client.acceptSubscription(ReceivedPresence.from);\n    client.subscribe(ReceivedPresence.from, function () {\n      return console.log(\"subscrption request sent back to\" + ReceivedPresence.from);\n    });\n  });\n  client.on(\"presence\", function (presence) {\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\n      //here we need to update user status that user is offline\n      console.log(\"i am unavailable\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"offline\"\n      }));\n    } else if (!presence.hasOwnProperty(\"type\")) {\n      //here we need to update user status that user is online\n      console.log(\"i am available\", presence.from);\n      store.dispatch(updateUserStatus({\n        id: presence.from.split(\"@\")[0],\n        onlineStatus: \"online\"\n      }));\n    }\n  });\n  client.on(\"unavailable\", function (presence) {// console.log(presence.from + \" is offline\");\n  }); // client.on(\"available\", (presence) => {\n  //   console.log(\"available\", presence);\n  // });\n\n  return client;\n}\nvar roster;\n\nvar getContacts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context.sent;\n            roster = contacts.items;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getRosterItems = function getRosterItems() {\n  return roster;\n};","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","store","updateUserStatus","Cookies","cookies","cokie","get","client","chatClient","username","password","createClient","jid","transports","websocket","bosh","rosterVer","on","console","log","getContacts","sendPresence","setInterval","ifConnected","window","navigator","onLine","ping","then","message","error","user","localStorage","getItem","pass","reconnect","connect","ReceivedPresence","acceptSubscription","from","subscribe","presence","hasOwnProperty","type","dispatch","id","split","onlineStatus","roster","getRoster","contacts","items","getRosterItems"],"mappings":"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","sourcesContent":["import * as XMPP from \"stanza\";\r\nimport store from \"../redux/store/store\";\r\nimport { updateUserStatus } from \"../redux/actions/index\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\nconst cokie = cookies.get(\"credentials\");\r\nlet client;\r\n\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n    rosterVer: \"ver14\",\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    console.log(\"session started\");\r\n    getContacts();\r\n    client.sendPresence();\r\n  });\r\n\r\n  //pinging the server\r\n  setInterval(() => {\r\n    var ifConnected = window.navigator.onLine;\r\n    if (ifConnected) {\r\n      console.log(\"Connection available\");\r\n      client\r\n        .ping(username)\r\n        .then((message) => {\r\n          console.log(\"ping send\", message);\r\n        })\r\n        .catch((error) => {\r\n          const user = localStorage.getItem(\"username\");\r\n          const pass = localStorage.getItem(\"password\");\r\n          console.log(\"ping error\", error);\r\n          let reconnect = chatClient(user, pass);\r\n          reconnect.connect();\r\n          console.log(\"connect\", reconnect.user, user);\r\n        });\r\n    } else {\r\n      console.log(\"Connection not available\");\r\n    }\r\n  }, 5000);\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n\r\n  client.on(\"subscribe\", (ReceivedPresence) => {\r\n    console.log(\"received request from\", ReceivedPresence);\r\n    client.acceptSubscription(ReceivedPresence.from);\r\n    client.subscribe(ReceivedPresence.from, () =>\r\n      console.log(\"subscrption request sent back to\" + ReceivedPresence.from)\r\n    );\r\n  });\r\n\r\n  client.on(\"presence\", (presence) => {\r\n    if (presence.hasOwnProperty(\"type\") && presence.type == \"unavailable\") {\r\n      //here we need to update user status that user is offline\r\n      console.log(\"i am unavailable\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"offline\",\r\n        })\r\n      );\r\n    } else if (!presence.hasOwnProperty(\"type\")) {\r\n      //here we need to update user status that user is online\r\n      console.log(\"i am available\", presence.from);\r\n      store.dispatch(\r\n        updateUserStatus({\r\n          id: presence.from.split(\"@\")[0],\r\n          onlineStatus: \"online\",\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  client.on(\"unavailable\", (presence) => {\r\n    // console.log(presence.from + \" is offline\");\r\n  });\r\n  // client.on(\"available\", (presence) => {\r\n  //   console.log(\"available\", presence);\r\n  // });\r\n  return client;\r\n}\r\n\r\nlet roster;\r\nconst getContacts = async () => {\r\n  let contacts = await client.getRoster();\r\n\r\n  roster = contacts.items;\r\n};\r\n\r\nexport const getRosterItems = () => {\r\n  return roster;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}