{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as XMPP from \"stanza\";\nvar client;\n\nfunction addContact() {\n  return _addContact.apply(this, arguments);\n}\n\nfunction _addContact() {\n  _addContact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var stnza, s;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            stnza = {\n              group: \"Servants\",\n              jid: \"dar@mongoose.mysmartpbx.org\",\n              name: \"Nurse\",\n              xmlns: \"jabber:iq:roster\",\n              from: client.config.jid,\n              type: \"set\",\n              id: \"roster_2\"\n            };\n            _context2.next = 3;\n            return client.sendIQ(\"iq\", stnza);\n\n          case 3:\n            s = _context2.sent;\n            console.log(\"sendiq\", s);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _addContact.apply(this, arguments);\n}\n\nexport default function chatClient(username, password) {\n  client = XMPP.createClient({\n    jid: username,\n    password: password,\n    transports: {\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\n      bosh: \"false\"\n    }\n  }); //client.on(\"*\", console.log);\n\n  client.on(\"session:started\", function () {\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\n    getContacts();\n    client.sendPresence();\n    addContact();\n  });\n  client.on(\"auth:failed\", function () {\n    console.log(\"xmpp authentication failed\");\n  });\n  return client;\n}\nexport var getContacts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getRoster();\n\n          case 2:\n            contacts = _context.sent;\n            console.log(\"all contacts \", contacts.items);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContacts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/chat/stanza/chatClient.js"],"names":["XMPP","client","addContact","stnza","group","jid","name","xmlns","from","config","type","id","sendIQ","s","console","log","chatClient","username","password","createClient","transports","websocket","bosh","on","subscribe","getContacts","sendPresence","getRoster","contacts","items"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,IAAIC,MAAJ;;SAEeC,U;;;;;yEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,KADN,GACc;AACVC,cAAAA,KAAK,EAAE,UADG;AAEVC,cAAAA,GAAG,EAAE,6BAFK;AAGVC,cAAAA,IAAI,EAAE,OAHI;AAIVC,cAAAA,KAAK,EAAE,kBAJG;AAKVC,cAAAA,IAAI,EAAEP,MAAM,CAACQ,MAAP,CAAcJ,GALV;AAMVK,cAAAA,IAAI,EAAE,KANI;AAOVC,cAAAA,EAAE,EAAE;AAPM,aADd;AAAA;AAAA,mBAUkBV,MAAM,CAACW,MAAP,CAAc,IAAd,EAAoBT,KAApB,CAVlB;;AAAA;AAUQU,YAAAA,CAVR;AAWEC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,CAAtB;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,eAAe,SAASG,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACrDjB,EAAAA,MAAM,GAAGD,IAAI,CAACmB,YAAL,CAAkB;AACzBd,IAAAA,GAAG,EAAEY,QADoB;AAEzBC,IAAAA,QAAQ,EAARA,QAFyB;AAGzBE,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE,2CADD;AAEVC,MAAAA,IAAI,EAAE;AAFI;AAHa,GAAlB,CAAT,CADqD,CASrD;;AACArB,EAAAA,MAAM,CAACsB,EAAP,CAAU,iBAAV,EAA6B,YAAM;AACjCtB,IAAAA,MAAM,CAACuB,SAAP,CAAiB,iCAAjB;AACAC,IAAAA,WAAW;AACXxB,IAAAA,MAAM,CAACyB,YAAP;AACAxB,IAAAA,UAAU;AACX,GALD;AAOAD,EAAAA,MAAM,CAACsB,EAAP,CAAU,aAAV,EAAyB,YAAM;AAC7BT,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAFD;AAGA,SAAOd,MAAP;AACD;AAED,OAAO,IAAMwB,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFxB,MAAM,CAAC0B,SAAP,EADE;;AAAA;AACnBC,YAAAA,QADmB;AAEzBd,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,QAAQ,CAACC,KAAtC;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import * as XMPP from \"stanza\";\r\nlet client;\r\n\r\nasync function addContact() {\r\n  var stnza = {\r\n    group: \"Servants\",\r\n    jid: \"dar@mongoose.mysmartpbx.org\",\r\n    name: \"Nurse\",\r\n    xmlns: \"jabber:iq:roster\",\r\n    from: client.config.jid,\r\n    type: \"set\",\r\n    id: \"roster_2\",\r\n  };\r\n  const s = await client.sendIQ(\"iq\", stnza);\r\n  console.log(\"sendiq\", s);\r\n}\r\nexport default function chatClient(username, password) {\r\n  client = XMPP.createClient({\r\n    jid: username,\r\n    password,\r\n    transports: {\r\n      websocket: \"ws://mongoose.mysmartpbx.org:5280/ws-xmpp\",\r\n      bosh: \"false\",\r\n    },\r\n  });\r\n  //client.on(\"*\", console.log);\r\n  client.on(\"session:started\", () => {\r\n    client.subscribe(\"sumanth@mongoose.mysmartpbx.org\");\r\n    getContacts();\r\n    client.sendPresence();\r\n    addContact();\r\n  });\r\n\r\n  client.on(\"auth:failed\", () => {\r\n    console.log(\"xmpp authentication failed\");\r\n  });\r\n  return client;\r\n}\r\n\r\nexport const getContacts = async () => {\r\n  const contacts = await client.getRoster();\r\n  console.log(\"all contacts \", contacts.items);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}